<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DavidChan&#39;s Blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2025-09-28T15:39:42.729Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>DavidChan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vibeBot 实战操作指南</title>
    <link href="http://yoursite.com/2025/09/27/vibeBot%20%E5%AE%9E%E6%88%98%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2025/09/27/vibeBot%20%E5%AE%9E%E6%88%98%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</id>
    <published>2025-09-27T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#1-xiang-mu-gai-lan">1. 项目概览</a></li><li><a href="#2-kuai-su-shang-shou-liu-cheng">2. 快速上手流程</a></li><li><a href="#3-chang-yong-cao-zuo-qing-dan">3. 常用操作清单</a></li><li><a href="#4-ri-zhi-yu-jian-kong-yao-dian">4. 日志与监控要点</a></li><li><a href="#5-mo-xing-qie-huan-yu-context7-zeng-qiang">5. 模型切换与 Context7 增强</a></li><li><a href="#6-faq-yu-pai-zhang">6. FAQ 与排障</a></li><li><a href="#7-zui-jia-shi-jian-yu-an-quan-jian-yi">7. 最佳实践与安全建议</a></li><li><a href="#8-can-kao-zi-liao">8. 参考资料</a></li></ul><!-- tocstop --></div><h1><span id="1-xiang-mu-gai-lan">1. 项目概览</span><a href="#1-xiang-mu-gai-lan" class="header-anchor">#</a></h1><ul><li>vibeBot 是一套“Telegram → Mac CLI → Telegram 回推”的自动化工作流，核心由 <code>bot.py</code>（aiogram 3 Worker）驱动，通过 tmux 与本地模型 CLI 协作，关键步骤整理自 <code>/Users/david/hypha/tools/vibeBot/README.md</code>，亦可配合 <a href="https://github.com/upstash/context7/blob/master/README.md" target="_blank" rel="noopener">Context7 官方说明</a> 获取最新文档上下文。</li><li>项目主目录分为三类：运行脚本 (<code>scripts/*.sh</code>)、模型配置 (<code>scripts/models/*.sh</code>)、运行日志 (<code>logs/&lt;model&gt;/&lt;project&gt;/…</code>)，结合 <code>.env</code> 与 <code>config/projects.json</code> 管理多项目实例。</li><li>定位：提供统一的 master bot 控制入口，同时为每个项目启动独立 worker，满足多模型（Codex/ClaudeCode/Gemini）并行处理需求。</li></ul><h1><span id="2-kuai-su-shang-shou-liu-cheng">2. 快速上手流程</span><a href="#2-kuai-su-shang-shou-liu-cheng" class="header-anchor">#</a></h1><ol><li>准备环境：确保 macOS 具备 Python 3.11+、tmux、Telegram Bot Token。</li><li>初始化配置：<ul><li>复制模板：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/vibeBot</span><br><span class="line">cp .env.example .env</span><br><span class="line">cp config/projects.sample.json config/projects.json</span><br></pre></td></tr></table></figure></li><li>在 <code>.env</code> 中仅填写 master 侧参数：<code>MASTER_BOT_TOKEN</code>、<code>MASTER_WHITELIST</code>、<code>MODEL_DEFAULT</code>、<code>TMUX_SESSION_PREFIX</code> 等。</li><li>在 <code>config/projects.json</code> 为每个项目写入 <code>bot_name</code>、<code>bot_token</code>、<code>project_slug</code>、<code>default_model</code>、<code>workdir</code> 等字段，<code>allowed_chat_id</code> 留空可自动记录首个合法会话。</li></ul></li><li>启动并验证：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./scripts/run_bot.sh --model codex --project mall-backend</span><br><span class="line">tail -f logs/codex/mall-backend/run_bot.log</span><br></pre></td></tr></table></figure><ul><li><code>run_bot.sh</code> 自动创建虚拟环境、安装依赖、启动 tmux session，再调用模型 CLI 与 <code>bot.py</code>。</li><li>如需前台调试，可追加 <code>--foreground</code>；要跳过预先 stop，加 <code>--no-stop</code>。</li></ul></li><li>停止或切换：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./scripts/stop_bot.sh --model codex --project mall-backend</span><br><span class="line">./scripts/run_bot.sh --model claudecode --project mall-backend</span><br></pre></td></tr></table></figure><ul><li><code>stop_bot.sh</code> 会尝试 <code>tmux kill-session</code>、结束 <code>bot.pid</code> 指定进程并清理缓存，确保切换模型时幂等。</li></ul></li></ol><h1><span id="3-chang-yong-cao-zuo-qing-dan">3. 常用操作清单</span><a href="#3-chang-yong-cao-zuo-qing-dan" class="header-anchor">#</a></h1><table><thead><tr><th>场景</th><th>脚本/命令</th><th>说明</th></tr></thead><tbody><tr><td>启动 worker</td><td><code>./scripts/run_bot.sh --model &lt;name&gt; --project &lt;slug&gt;</code></td><td>自动建 venv、导入配置并后台运行，可加 <code>--foreground</code> 调试</td></tr><tr><td>停止 worker</td><td><code>./scripts/stop_bot.sh --model &lt;name&gt; --project &lt;slug&gt;</code></td><td>关闭 tmux session 与 <code>bot.py</code>，删除临时状态</td></tr><tr><td>查看模型日志</td><td><code>tail -f logs/&lt;model&gt;/&lt;project&gt;/model.log</code></td><td>由 tmux pipe-pane 捕获模型 CLI 输出，排查上下文注入是否成功</td></tr><tr><td>查看运行日志</td><td><code>tail -f logs/&lt;model&gt;/&lt;project&gt;/run_bot.log</code></td><td>记录脚本启动流程、<code>.env</code> 解析、依赖安装信息</td></tr><tr><td>当前会话定位</td><td><code>cat logs/&lt;model&gt;/&lt;project&gt;/current_session.txt</code></td><td>存储 JSONL 会话路径，便于追踪同一对话上下文</td></tr><tr><td>Master 控制</td><td><code>/projects</code>、<code>/run &lt;project&gt;</code>、<code>/stop &lt;project&gt;</code></td><td>通过管理员 bot（<code>MASTER_BOT_TOKEN</code>）统一指挥，状态写入 <code>state/state.json</code></td></tr></tbody></table><h1><span id="4-ri-zhi-yu-jian-kong-yao-dian">4. 日志与监控要点</span><a href="#4-ri-zhi-yu-jian-kong-yao-dian" class="header-anchor">#</a></h1><ul><li>目录结构：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logs&#x2F;</span><br><span class="line">  └─ codex&#x2F;</span><br><span class="line">      └─ mall-backend&#x2F;</span><br><span class="line">           ├─ run_bot.log</span><br><span class="line">           ├─ model.log</span><br><span class="line">           ├─ bot.pid</span><br><span class="line">           └─ current_session.txt</span><br></pre></td></tr></table></figure></li><li>诊断建议：<ul><li><code>run_bot.log</code> 关注虚拟环境创建、依赖安装与 tmux session 名称。</li><li><code>model.log</code> 可校验命令注入与模型输出是否超时。</li><li><code>current_session.txt</code> 指向 JSONL 历史记录，出错时可配合 Context7 调取代码文档，快速定位 prompt。</li></ul></li></ul><h1><span id="5-mo-xing-qie-huan-yu-context7-zeng-qiang">5. 模型切换与 Context7 增强</span><a href="#5-mo-xing-qie-huan-yu-context7-zeng-qiang" class="header-anchor">#</a></h1><ul><li><code>scripts/models/</code> 目录分别维护 <code>codex.sh</code>、<code>claudecode.sh</code>、<code>gemini.sh</code>，公共逻辑在 <code>common.sh</code>，确保互不干扰。</li><li>切换步骤：先执行 <code>stop_bot.sh --model &lt;旧&gt;</code>，再 <code>run_bot.sh --model &lt;新&gt;</code>，<code>ACTIVE_MODEL</code> 会在 <code>/start</code> 回复中提示。</li><li>在 Cursor 等 IDE 中，可直接在 prompt 末尾追加 <code>use context7</code>，即时拉取依赖库或脚本的最新文档示例：<a href="https://github.com/upstash/context7/blob/master/README.md" target="_blank" rel="noopener">官方说明</a>。</li><li>CLI 集成示例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx @upstash/context7-mcp@latest --transport stdio</span><br></pre></td></tr></table></figure><ul><li>结合 vibeBot，可在 watcher 阶段读取 Context7 返回的上下文片段，提高多模型协同准确度。</li></ul></li></ul><h1><span id="6-faq-yu-pai-zhang">6. FAQ 与排障</span><a href="#6-faq-yu-pai-zhang" class="header-anchor">#</a></h1><ul><li><strong>为何 <code>.env</code> 只配置 master？</strong> 项目级 Token 放在 <code>config/projects.json</code>，便于按项目授权与版本控制。</li><li><strong><code>allowed_chat_id</code> 为空会怎样？</strong> worker 首次收到合法消息会写入 <code>state/state.json</code>，后续自动鉴权。</li><li><strong>如何定位命令未执行？</strong> 查看 <code>model.log</code> 是否存在 prompt 注入日志，必要时进入 tmux 会话手工输入。</li><li><strong>tmux 会话残留怎么办？</strong> <code>stop_bot.sh</code> 已对 <code>tmux kill-session</code> 和 <code>bot.pid</code> 做了幂等处理，若仍存在需手动 <code>tmux ls</code> 排查，同步清理。</li><li><strong>日志过大</strong>：定期清理 <code>logs/&lt;model&gt;/&lt;project&gt;/</code> 或调整脚本输出阈值；注意不要删除当前会话 JSONL。</li></ul><h1><span id="7-zui-jia-shi-jian-yu-an-quan-jian-yi">7. 最佳实践与安全建议</span><a href="#7-zui-jia-shi-jian-yu-an-quan-jian-yi" class="header-anchor">#</a></h1><ul><li>不要将 <code>.env</code>、<code>config/projects.json</code> 提交版本库；敏感 Token 改用 CI/CD 密钥或 macOS 钥匙串。</li><li>切换模型前务必执行 <code>stop_bot.sh</code>，避免多实例争用 tmux 名称或 JSONL 文件。</li><li>建议将 <code>run_bot.log</code>、<code>model.log</code> 纳入集中日志系统，配合 Context7 检索最新脚本变更。</li><li>定期运行 <code>./scripts/stop_bot.sh --model &lt;name&gt; --project &lt;slug&gt;</code> 做健康检查，确认 <code>bot.pid</code> 已释放。</li></ul><h1><span id="8-can-kao-zi-liao">8. 参考资料</span><a href="#8-can-kao-zi-liao" class="header-anchor">#</a></h1><ul><li><code>/Users/david/hypha/tools/vibeBot/README.md</code></li><li>Context7 MCP 官方文档：<a href="https://github.com/upstash/context7/blob/master/README.md" target="_blank" rel="noopener">https://github.com/upstash/context7/blob/master/README.md</a></li><li>Hexo 写作规范：<a href="https://hexo.io/docs/writing" target="_blank" rel="noopener">https://hexo.io/docs/writing</a></li></ul><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
    <category term="#AI" scheme="http://yoursite.com/tags/AI/"/>
    
    <category term="#vibe" scheme="http://yoursite.com/tags/vibe/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存模型</title>
    <link href="http://yoursite.com/2021/07/06/JVM-JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2021/07/06/JVM-JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-07-06T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#yin-yan">引言</a></li><li><a href="#jvm-nei-cun-mo-xing">JVM内存模型</a><ul><li><a href="#shi-me-shi-jvm-nei-cun-mo-xing">什么是JVM内存模型？</a><ul><li><a href="#dui">堆</a></li><li><a href="#fang-fa-qu">方法区</a></li><li><a href="#cheng-xu-ji-shu-qi">程序计数器</a></li><li><a href="#xu-ni-ji-zhan">虚拟机栈</a></li><li><a href="#ben-di-fang-fa-zhan">本地方法栈</a></li></ul></li></ul></li><li><a href="#ben-wen-zong-jie">本文总结</a></li><li><a href="#xiang-guan-wen-ti">相关问题</a><ul><li><a href="#jvm-shi-ru-he-wan-cheng-la-ji-shou-ji-de">JVM是如何完成垃圾收集的？</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yin-yan">引言</span><a href="#yin-yan" class="header-anchor">#</a></h1><blockquote><p>在上一篇文章<a href="https://imchenway.com/2021/07/06/JVM-JVM是如何与操作系统交互的/" target="_blank" rel="noopener">JVM是如何与操作系统交互的</a>中，我们介绍了CPU是如何与JVM去交互完成一个main方法的执行的。<br>那么在上篇文章中所提到的JVM虚拟机中的那一块内存区域是什么样的呢？<br>CPU是从JVM中的什么位置获取到了什么样的指令呢？</p><p>带着以上问题，我们来了解一下什么是JVM内存模型</p></blockquote><h1><span id="jvm-nei-cun-mo-xing">JVM内存模型</span><a href="#jvm-nei-cun-mo-xing" class="header-anchor">#</a></h1><h2><span id="shi-me-shi-jvm-nei-cun-mo-xing">什么是JVM内存模型？</span><a href="#shi-me-shi-jvm-nei-cun-mo-xing" class="header-anchor">#</a></h2><img src="/images/posts/JVM/JVM内存模型.png" width="500px"><p>由上图可以看到所有线程共享的区域为堆和方法区两部分，而程序计数器、栈和本地方法栈则为每个线程私有的内存区域。</p><h3><span id="dui">堆</span><a href="#dui" class="header-anchor">#</a></h3><p>对于Java应用来讲，堆是虚拟机所管理的内存中最大的一块，该区域被所有线程共享，在虚拟机启动时创建，几乎所有的Java对象实例都存放在该区域。</p><p>该区域也是垃圾收集器所管理的区域，由于G1垃圾收集器之前的大部分垃圾收集器都是基于分代理论设计的，所以从内存回收的角度来看的话，该区域有新生代、老年代、永久代。从分配内存的角度来看的话，堆中可以有多个线程私有的分配缓冲区，用于提升对象分配的效率。</p><p>无论从什么角度来看，最终的目的都是为了能更好的分配内存和回收内存。当对象在该区域无法完成内存空间的分配，并且堆空间也无法再扩展时，抛出OOM异常。</p><h3><span id="fang-fa-qu">方法区</span><a href="#fang-fa-qu" class="header-anchor">#</a></h3><p>方法区也是一块被各个线程共享的内存区域，用于存储已经被虚拟机加载的类型信息、常量、静态变量、即时编译后的代码缓存数据等，该区域基本不发生垃圾收集的行为，即使发生垃圾收集，收益也很小。</p><p>当该区域无法满足新的内存分配需求时，抛出OOM异常。</p><h3><span id="cheng-xu-ji-shu-qi">程序计数器</span><a href="#cheng-xu-ji-shu-qi" class="header-anchor">#</a></h3><p>程序计数器是一块线程私有的内存空间，因为多线程是通过线程轮流切换、分配处理器的执行时间来实现的，所以在任何一个具体的时刻，处理器的一个内核都只会执行一条线程中的指令，为了让线程切换后能恢复到正确的执行位置，所以每条线程都会由一个独立的程序计数器，各个线程之间的计数器独立存储，互不影响。当线程在执行Java方法时，记录着正在执行的虚拟机字节码的指令地址；执行Native方法时，该计数器为Undefined。该区域不会抛出OOM异常。</p><h3><span id="xu-ni-ji-zhan">虚拟机栈</span><a href="#xu-ni-ji-zhan" class="header-anchor">#</a></h3><img src="/images/posts/JVM/JVM栈空间.png" width="350px"><p>和程序计数器一样，栈也是线程私有的一块内存空间，也可以叫做Java方法执行的线程内存模型，每个方法被执行时，都会同步创建一个栈帧，用于存储局部变量表、操作数栈、方法出口等信息。每个方法从被调用到执行完毕就对应着一个栈帧在虚拟机栈中的入栈和出栈的过程。</p><blockquote><p>一个线程中的方法调用链可能会很长，以Java程序的角度来看，同一时刻、同一条线程里面，在 调用堆栈的所有方法都同时处于执行状态。而对于执行引擎来讲，在活动线程中，只有位于栈顶的方法才是在运行的，只有位于栈顶的栈帧才是生效的，其被称为“当前栈帧”（Current Stack Frame），与 这个栈帧所关联的方法被称为“当前方法”（Current Method）。执行引擎所运行的所有字节码指令都只针对当前栈帧进行操作。</p></blockquote><p>该内存区域异常情况：当线程请求的栈深度大于虚拟机所允许的栈深度时，抛出StackOverflowError异常；如果Java虚拟机允许动态扩展，当栈扩展时无法申请到足够的内存时，抛出OOM异常。</p><h3><span id="ben-di-fang-fa-zhan">本地方法栈</span><a href="#ben-di-fang-fa-zhan" class="header-anchor">#</a></h3><p>本地方法栈与虚拟机栈作用相似，区别为本地方法栈服务于Native方法。</p><h1><span id="ben-wen-zong-jie">本文总结</span><a href="#ben-wen-zong-jie" class="header-anchor">#</a></h1><p>当<code>class</code>文件被加载进虚拟机后，类信息会存放在方法区，在实际运行的时候会执行方法区中的代码，在<code>JVM</code>中所有的线程共享堆内存和方法区，而每个线程有自己独立的Java方法栈，本地方法栈（面向native方法），PC寄存器（存放线程执行位置），当调用一个方法的时候，Java虚拟机会在当前线程对应的方法栈中压入一个栈帧，用来存放Java字节码操作数以及局部变量，这个方法执行完会弹出栈帧，一个线程会连续执行多个方法，对应不同的栈帧的压入和弹出，压入栈帧后就是JVM解释执行的过程了。 </p><h1><span id="xiang-guan-wen-ti">相关问题</span><a href="#xiang-guan-wen-ti" class="header-anchor">#</a></h1><h3><span id="jvm-shi-ru-he-wan-cheng-la-ji-shou-ji-de">JVM是如何完成垃圾收集的？</span><a href="#jvm-shi-ru-he-wan-cheng-la-ji-shou-ji-de" class="header-anchor">#</a></h3><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM是如何与操作系统交互的</title>
    <link href="http://yoursite.com/2021/07/05/JVM-JVM%E6%98%AF%E5%A6%82%E4%BD%95%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92%E7%9A%84/"/>
    <id>http://yoursite.com/2021/07/05/JVM-JVM%E6%98%AF%E5%A6%82%E4%BD%95%E4%B8%8E%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%A4%E4%BA%92%E7%9A%84/</id>
    <published>2021-07-05T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#yin-yan">引言</a></li><li><a href="#cpu-de-zu-cheng">CPU的组成</a></li><li><a href="#cpu-gong-zuo-yuan-li">CPU工作原理</a></li><li><a href="#jvm-shi-ru-he-yu-cao-zuo-xi-tong-jiao-hu-de">JVM是如何与操作系统交互的？</a></li><li><a href="#ben-wen-zong-jie">本文总结</a></li><li><a href="#xiang-guan-wen-ti">相关问题</a><ul><li><a href="#shi-me-shi-jvm-nei-cun-mo-xing">什么是JVM内存模型？</a></li><li><a href="#shi-me-shi-cpu-cache-cache-line-mesi">什么是CPU Cache、Cache Line、MESI？</a></li><li><a href="#shi-me-shi-yong-hu-tai-he-nei-he-tai">什么是用户态和内核态？</a></li><li><a href="#shi-me-shi-jvm-de-qian-duan-bian-yi-qi-jit-bian-yi-qi-aot-bian-yi-qi">什么是JVM的前端编译器、JIT编译器、AOT编译器？</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yin-yan">引言</span><a href="#yin-yan" class="header-anchor">#</a></h1><blockquote><p>在之前的文章，我们介绍了<a href="https://imchenway.com/2021/07/01/JVM-类加载机制/" target="_blank" rel="noopener">类加载的过程</a>以及<a href="https://imchenway.com/2021/07/02/JVM-类加载器与双亲委派模型/" target="_blank" rel="noopener">类加载器和双亲委派模型</a><br>那么我们的应用程序被加载到JVM中之后，操作系统是如何去与JVM虚拟机交互来执行我们应用程序中的逻辑的呢？<br>答案就是大名鼎鼎的CPU，全称是<code>Central Processing Unit</code>，也就是中央处理器。<br>那么CPU在操作系统中起到了什么样的作用呢？</p></blockquote><h1><span id="cpu-de-zu-cheng">CPU的组成</span><a href="#cpu-de-zu-cheng" class="header-anchor">#</a></h1><img src="/images/posts/JVM/CPU组成图.jpeg" width="500px"><h1><span id="cpu-gong-zuo-yuan-li">CPU工作原理</span><a href="#cpu-gong-zuo-yuan-li" class="header-anchor">#</a></h1><p>CPU由主要由控制器和运算器两部分组成。</p><ul><li>其中控制器中程序计数器（PC）、指令寄存器（IR）、指令译码器（ID）、时序发生器、操作控制器组成，他们的主要功能为：<ol><li>从主存中取出一条指令，并指出下一条指令在主存中的位置；</li><li>对指令进行译码，并产生相应的操作控制信号；</li><li>指挥并控制CPU、主存和输入/输出设备之间的数据流动；</li></ol></li><li>运算器由算数逻辑单元（ALU）、累加寄存器（AC）、数据寄存器（DR）和程序状态寄存器（PSW）组成，主要功能为：<ol><li>执行所有的算术运算；</li><li>执行所有的逻辑运算，并进行逻辑测试；</li></ol></li></ul><blockquote><p>非常的枯燥无味，说人话就是：CPU会根据程序计数器所指示的位置，从主存中取出数据，寄存至数据寄存器，然后CPU从数据寄存器中取出指令，放入指令寄存器，并对指令译码。将指令分解成一系列的微操作，然后发出控制命令，执行这一系列微操作，从而完成一条指令的执行。</p></blockquote><h1><span id="jvm-shi-ru-he-yu-cao-zuo-xi-tong-jiao-hu-de">JVM是如何与操作系统交互的？</span><a href="#jvm-shi-ru-he-yu-cao-zuo-xi-tong-jiao-hu-de" class="header-anchor">#</a></h1><p>在前面的文章中我们说过，Java的跨平台的特性是基于JVM虚拟机能够将Java代码编译后的字节码（.class）文件转译为对应的机器所能识别的机器码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteCodeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>javac</code>编译后使用<code>javap -verbose</code>命令即可查看到该类的字节码<br>以下是<code>System.out.println(&quot;Hello world&quot;)</code>的对应的字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0: getstatic     #7                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">3: ldc           #13                 &#x2F;&#x2F; String Hello world</span><br><span class="line">5: invokevirtual #15                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br></pre></td></tr></table></figure><p>虚拟机将以上字节码通过解释器解释成汇编指令，最终由硬件转译为CPU能识别的机器指令。</p><ol><li>在<code>java</code>命令执行后，虚拟机启动，将class文件加载到虚拟机由于该类包含了main方法，JVM类加载机制在之前的文章<a href="https://imchenway.com/2021/07/01/JVM-类加载机制/" target="_blank" rel="noopener">JVM中类加载的过程</a>中的<code>初始化</code>部分中讲过，包含main方法的类，会在虚拟机启动时过程中触发<code>初始化</code>的动作，那么该类中的信息就会被我们按照JVM内存模型的规则存入相对应的内存区域<ul><li>我们暂且先把它理解为单纯的一块内存区域。JVM虚拟机暂时理解为运行在操作系统之上的一个虚拟电脑，操作系统为这个虚拟电脑分配CPU、内存等资源，而此时JVM虚拟机也可以称之为操作系统的一个进程。</li></ul></li><li>在虚拟机启动之后，此时的虚拟机我们可以将其理解为一段可执行的指令集合，同时虚拟机作为操作系统的一个进程，操作系统为其分配类内存和CPU资源，其中保存着当前执行的指令，变量值等信息，这也可以称为进程的上下文。</li><li>此时CPU在多个上下文（多个进程/多个线程）切换执行指令，此时的上下文可能来自于系统调度，也可能来自于用户程序，也就会产生用户态和内核态之前的切换。</li></ol><h1><span id="ben-wen-zong-jie">本文总结</span><a href="#ben-wen-zong-jie" class="header-anchor">#</a></h1><ol><li>在<code>java</code>命令执行后，相当于在操作系统中启动了一个JVM进程，虚拟机启动，将class文件通过类装载器加载到虚拟机的内存区域，然后通过JVM通过Java解释器和JIT编译器两者相结合的方式，将字节码解释为汇编语言（对应操作系统的相关函数），等待被调用。</li><li>CPU通过JVM，获取到需要执行的汇编指令，CPU获取到汇编指令后通过硬件解码为机器所能识别的机器码，然后执行其机器码。</li></ol><h1><span id="xiang-guan-wen-ti">相关问题</span><a href="#xiang-guan-wen-ti" class="header-anchor">#</a></h1><h3><span id="shi-me-shi-jvm-nei-cun-mo-xing">什么是JVM内存模型？</span><a href="#shi-me-shi-jvm-nei-cun-mo-xing" class="header-anchor">#</a></h3><ul><li><a href="https://imchenway.com/2021/07/07/JVM-JVM内存模型/" target="_blank" rel="noopener">JVM内存模型</a></li></ul><h3><span id="shi-me-shi-cpu-cache-cache-line-mesi">什么是CPU Cache、Cache Line、MESI？</span><a href="#shi-me-shi-cpu-cache-cache-line-mesi" class="header-anchor">#</a></h3><h3><span id="shi-me-shi-yong-hu-tai-he-nei-he-tai">什么是用户态和内核态？</span><a href="#shi-me-shi-yong-hu-tai-he-nei-he-tai" class="header-anchor">#</a></h3><h3><span id="shi-me-shi-jvm-de-qian-duan-bian-yi-qi-jit-bian-yi-qi-aot-bian-yi-qi">什么是JVM的前端编译器、JIT编译器、AOT编译器？</span><a href="#shi-me-shi-jvm-de-qian-duan-bian-yi-qi-jit-bian-yi-qi-aot-bian-yi-qi" class="header-anchor">#</a></h3><hr><h4><span id="can-kao-zi-liao">参考资料</span><a href="#can-kao-zi-liao" class="header-anchor">#</a></h4><ul><li><a href="https://software.intel.com/content/www/cn/zh/develop/articles/book-processor-architecture_cpu_function_and_composition.html" target="_blank" rel="noopener">CPU的功能和组成 - Intel® Developer Zone</a></li></ul><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
    <category term="#操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>JVM类加载器与双亲委派模型（JDK8）</title>
    <link href="http://yoursite.com/2021/07/01/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2021/07/01/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-07-01T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#yin-yan">引言</a></li><li><a href="#jvm-lei-jia-zai-qi">JVM类加载器</a><ul><li><a href="#shi-me-shi-lei-jia-zai-qi">什么是类加载器？</a></li><li><a href="#lei-yu-lei-jia-zai-qi-de-guan-xi">类与类加载器的关系</a></li><li><a href="#lei-jia-zai-qi-shi-ru-he-qu-jia-zai-lei-de">类加载器是如何去加载类的？</a><ul><li><a href="#shuang-qin-wei-pai-mo-xing">双亲委派模型</a></li><li><a href="#shuang-qin-wei-pai-mo-xing-gong-zuo-guo-cheng">双亲委派模型工作过程</a></li><li><a href="#wei-shi-me-xu-yao-shuang-qin-wei-pai">为什么需要双亲委派？</a></li><li><a href="#shuang-qin-wei-pai-shi-ru-he-shi-xian-de">双亲委派是如何实现的？</a></li></ul></li></ul></li><li><a href="#ben-wen-zong-jie">本文总结</a></li><li><a href="#xiang-guan-wen-ti">相关问题</a><ul><li><a href="#ru-he-po-pi-shuang-qin-wei-pai-mo-xing">如何破坏双亲委派模型？</a></li><li><a href="#wei-shi-me-yao-po-pi-shuang-qin-wei-pai-mo-xing">为什么要破坏双亲委派模型？</a></li><li><a href="#you-na-xie-po-pi-liao-shuang-qin-wei-pai-mo-xing-de-li-zi-fen-bie-shi-wei-liao-shi-me-mu-de">有哪些破坏了双亲委派模型的例子？分别是为了什么目的？</a></li><li><a href="#tomcat-zhong-lei-jia-zai-qi-de-jia-gou-shi-zen-me-yang-de">Tomcat中类加载器的架构是怎么样的？</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yin-yan">引言</span><a href="#yin-yan" class="header-anchor">#</a></h1><blockquote><p>在上文<a href="https://imchenway.com/2021/07/01/JVM-类加载机制" target="_blank" rel="noopener">JVM-类加载机制</a>中，描述了在<code>java</code>命令执行后，JVM类加载的整个流程。</p><ul><li>在上文中可以看到ClassLoader在<code>java</code>命令执行后起到了承上启下的重要作用</li><li>那么JVM中的ClassLoader是如何运行的呢？本文将带你揭开它神秘的面纱</li></ul></blockquote><h1><span id="jvm-lei-jia-zai-qi">JVM类加载器</span><a href="#jvm-lei-jia-zai-qi" class="header-anchor">#</a></h1><h2><span id="shi-me-shi-lei-jia-zai-qi">什么是类加载器？</span><a href="#shi-me-shi-lei-jia-zai-qi" class="header-anchor">#</a></h2><p>虚拟机的设计团队把类加载阶段中的<code>通过类的全限定名去找到对应的Class文件</code>这个动作放到Java虚拟机的外部去实现，为了便于让应用程序自己决定如何去获取所需要的类，实现这个动作的代码模块就叫做“类加载器”。</p><h2><span id="lei-yu-lei-jia-zai-qi-de-guan-xi">类与类加载器的关系</span><a href="#lei-yu-lei-jia-zai-qi-de-guan-xi" class="header-anchor">#</a></h2><p>类加载器只用于类的加载动作，但是在我们的Java程序中起到的作用却不至于类的加载。在我们比较两个类是否相等时（<code>equals()</code>、<code>isInstance()</code>、关键字<code>instanceof</code>），即使两个类来源于同一个Class文件，被同一个虚拟机加载，当它们的类加载不同时，那么这两个类也会不相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imchenway.classload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类加载器与类的关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> David Chan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-07-02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        ClassLoader classLoader = <span class="keyword">new</span> ClassLoader()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                String fileName = name.substring(name.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>) + <span class="string">".class"</span>;</span><br><span class="line">                InputStream is = getClass().getResourceAsStream(fileName);</span><br><span class="line">                <span class="keyword">if</span> (is == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">                    is.read(b);</span><br><span class="line">                    <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Object obj = classLoader.loadClass(<span class="string">"com.imchenway.classload.ClassLoaderTest"</span>).newInstance();</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> com.imchenway.classload.ClassLoaderTest);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"ClassLoaderTest classLoader: "</span> + ClassLoaderTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>().<span class="title">toString</span>())</span>;</span><br><span class="line">        System.out.println(<span class="string">"obj classLoader: "</span> + obj.getClass().getClassLoader().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class com.imchenway.classload.ClassLoaderTest</span><br><span class="line">false</span><br><span class="line">ClassLoaderTest classLoader: jdk.internal.loader.ClassLoaders$AppClassLoader@55054057</span><br><span class="line">obj classLoader: com.imchenway.classload.ClassLoaderTest$1@6ff3c5b5</span><br></pre></td></tr></table></figure><p>由此可以看到，<code>ClassLoaderTest</code>在启动时由<code>jdk.internal.loader.ClassLoaders$AppClassLoader@55054057</code>所加载，而<code>obj</code>由<code>com.imchenway.classload.ClassLoaderTest$1@6ff3c5b5</code>所加载，所以<code>System.out.println(obj instanceof com.imchenway.classload.ClassLoaderTest);</code>这一行输出的结果为<code>false</code>，因为类的唯一性由是否是同一个类加载器和是否同一个字节码文件同时决定的。</p><h2><span id="lei-jia-zai-qi-shi-ru-he-qu-jia-zai-lei-de">类加载器是如何去加载类的？</span><a href="#lei-jia-zai-qi-shi-ru-he-qu-jia-zai-lei-de" class="header-anchor">#</a></h2><h3><span id="shuang-qin-wei-pai-mo-xing">双亲委派模型</span><a href="#shuang-qin-wei-pai-mo-xing" class="header-anchor">#</a></h3><ul><li>从Java虚拟机的角度来说，只存在两种不同的类加载器，一种是启动类加载器，使用C++实现，是虚拟机自身的一部分；另一种就是所有其他的类加载器，都是由Java实现的，全部都继承自抽象类<code>java.lang.ClassLoader</code>。</li><li>从Java开发人员的角度来说，类加载器主要分为：<ul><li>启动类加载器（BootStrap ClassLoader）：负责将存放于<code>&lt;JAVA_HOME&gt;\lib</code>目录中的，或者被<code>XbootClasspath</code>参数指定路径的类库加载到虚拟机内存中。</li><li>扩展类加载器（Extension ClassLoader）：负责将存放于<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中的，或者被<code>java.ext.dirs</code>系统变量所指定的类库。</li><li>应用程序类加载器（Application ClassLoader）：负责将用户类路径（classPath）上所指定的类库</li><li>除了以上三种类加载器外，我们还可以自定义类加载器。（TODO 如何使用自定义类加载器实现类加载？）</li></ul></li></ul><h3><span id="shuang-qin-wei-pai-mo-xing-gong-zuo-guo-cheng">双亲委派模型工作过程</span><a href="#shuang-qin-wei-pai-mo-xing-gong-zuo-guo-cheng" class="header-anchor">#</a></h3><img src="/images/posts/JVM/双亲委派模型.png" width="400px"><p>当一个类加载器收到了类加载的请求时，首先是交给自己的父类加载器去加载，最终都会到达顶层的引导类加载器，当父类加载器反馈无法完成这个加载请求时，子加载器尝试自己去加载。</p><h3><span id="wei-shi-me-xu-yao-shuang-qin-wei-pai">为什么需要双亲委派？</span><a href="#wei-shi-me-xu-yao-shuang-qin-wei-pai" class="header-anchor">#</a></h3><ol><li>可以避免类的重复加载，当父加载器已经加载过某一个类时，子加载器就不会再重新加载这个类。</li><li>保证应用程序的安全性，防止核心API被篡改。<blockquote><p>在类与类加载器的关系中我们证明了一个类的唯一性由加载这个类的类加载器和类本身所决定，如果没有双亲委派机制存在的话，设想如果应⽤程序类加载器想要 加载⼀个有破坏性的<code>java.lang.System</code>类，双亲委派模型会⼀层层向上委派，最终委派给启动类加载器，而启动类加载器中检查到缓存中已经有了这个类，并不会再加载这个有破坏性的System类。</p></blockquote></li></ol><p>当然，实际上自定义包名<code>java</code>开头的类将无法加载成功<br><img src="/images/posts/JVM/preDefineClass.png" width="500px"></p><h3><span id="shuang-qin-wei-pai-shi-ru-he-shi-xian-de">双亲委派是如何实现的？</span><a href="#shuang-qin-wei-pai-shi-ru-he-shi-xian-de" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>findLoadedClass(name);</code>判断该类是否已经加载，如果加载过，则使用缓存</li><li>如果加载器不为null，则继续调用父类加载器的<code>loadClass(String name, boolean resolve)</code>方法</li><li>如果加载器为null，说明当前为引导类加载器（bootstrapClassLoader），在<code>findBootstrapClassOrNull(name)</code>中调用本地方法（C++实现）</li></ol><h1><span id="ben-wen-zong-jie">本文总结</span><a href="#ben-wen-zong-jie" class="header-anchor">#</a></h1><ul><li>在类的加载阶段，Java虚拟机通过类加载器模块去实现<code>通过类的全限定名去找到对应的Class文件</code>，同时通过类加载器的唯一实例对象地址和字节码文件的相同来判定类的唯一性，正时因为这个特性，也让类加载机制可以拥有隔离性。</li><li>类加载的过程中，使用双亲委派机制来避免类的重复加载，同时也保障了核心类库API不被篡改。</li></ul><h1><span id="xiang-guan-wen-ti">相关问题</span><a href="#xiang-guan-wen-ti" class="header-anchor">#</a></h1><h3><span id="ru-he-po-pi-shuang-qin-wei-pai-mo-xing">如何破坏双亲委派模型？</span><a href="#ru-he-po-pi-shuang-qin-wei-pai-mo-xing" class="header-anchor">#</a></h3><p>破坏双亲委托模型，只需要在<code>loadClass(String name, boolean resolve)</code> 方法中，不调用父类加载器去加载类就可以了。</p><h3><span id="wei-shi-me-yao-po-pi-shuang-qin-wei-pai-mo-xing">为什么要破坏双亲委派模型？</span><a href="#wei-shi-me-yao-po-pi-shuang-qin-wei-pai-mo-xing" class="header-anchor">#</a></h3><p>由于<code>类的唯一性由是否是同一个类加载器和是否同一个字节码文件同时决定的</code>这一特性，可以为应用程序提供类库的隔离性。</p><h3><span id="you-na-xie-po-pi-liao-shuang-qin-wei-pai-mo-xing-de-li-zi-fen-bie-shi-wei-liao-shi-me-mu-de">有哪些破坏了双亲委派模型的例子？分别是为了什么目的？</span><a href="#you-na-xie-po-pi-liao-shuang-qin-wei-pai-mo-xing-de-li-zi-fen-bie-shi-wei-liao-shi-me-mu-de" class="header-anchor">#</a></h3><ol><li>Tomcat：我们经常会在一个Tomcat中部署多个应用程序，多个应用程序之前可能用着不同版本的类库，也可能共享着一部分类库。这个时候自定类加载器就可以派上用场了<ul><li>在Tomcat中主要用自定义类加载器解决以下几个问题：<ol><li>同一个Tomcat中，各个Web应用之前各自使用的Java类库要互相隔离</li><li>同一个Tomcat中，各个Web应用之间可以共享有共享的Java类库</li><li>为了使Tomcat不受web应用的影响，服务器的类库应该与应用程序的类库互相独立</li><li>使Tomcat支持热部署</li></ol></li></ul></li></ol><h3><span id="tomcat-zhong-lei-jia-zai-qi-de-jia-gou-shi-zen-me-yang-de">Tomcat中类加载器的架构是怎么样的？</span><a href="#tomcat-zhong-lei-jia-zai-qi-de-jia-gou-shi-zen-me-yang-de" class="header-anchor">#</a></h3><img src="/images/posts/JVM/Tomcat双亲委派模型.png" width="400px"><ul><li>CommonClassLoader：Tomcat最基本的类加载器，加载路径中的Class对Tomcat本身和每个WebApp可见</li><li>CatalinaClassLoader：Tomcat的容器私有类加载器，加载路径中的Class对WebApp不可见</li><li>SharedClassLoader：Tomcat的共享类加载器，加载路径中的Class可以被每个WebApp可见，但是对Tomcat不可见</li><li>WebAppClassLoader：各个WebApp的私有类加载器，加载路径中的Class仅对当前WebApp可见</li></ul><blockquote><p>CommonClassLoader能加载的类都可以被<code>Catalina ClassLoader</code>和<code>SharedClassLoader</code>使用，从而实现了公有类库的共用，而<code>CatalinaClassLoader</code>和<code>Shared ClassLoader</code>自己能加载的类则与对方相互隔离。<br>WebAppClassLoader可以使用<code>SharedClassLoader</code>加载到的类，但各个<code>WebAppClassLoader</code>实例之间相互隔离。</p></blockquote><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM中类加载的过程</title>
    <link href="http://yoursite.com/2021/06/30/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2021/06/30/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#yin-yan">引言</a></li><li><a href="#jvm-lei-jia-zai-de-guo-cheng">JVM类加载的过程</a><ul><li><a href="#jia-zai-jie-duan">加载阶段：</a></li><li><a href="#lian-jie-jie-duan-linking">链接阶段（linking）</a></li><li><a href="#chu-shi-hua">初始化</a></li></ul></li><li><a href="#ben-wen-zong-jie">本文总结</a></li><li><a href="#xiang-guan-wen-ti">相关问题</a><ul><li><a href="#xu-ni-ji-shi-ru-he-zuo-dao-tong-guo-lei-de-quan-xian-ding-ming-qu-zhao-dao-dui-ying-de-class-wen-jian-de">虚拟机是如何做到通过类的全限定名去找到对应的Class文件的？</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="yin-yan">引言</span><a href="#yin-yan" class="header-anchor">#</a></h1><blockquote><p>众所周知，Java的slogan就是”Write once, run anywhere.”，这也就意味着无论我们在什么平台的机器上用Java去做实现，都可以在任何支持Java的系统上直接运行，无需做任何额外操作。<br>Java是如何做到这些的呢？答案是JRE。</p><ul><li>那么什么是JRE？为什么叫JRE？<ul><li>JRE（Java Runtime Environment），是一个Java代码的运行时环境，属于软件层，运行在操作系统软件之上，属于JDK的一部分。</li></ul></li><li>什么是JDK？<ul><li>JDK（Java Development Kit），每一个JDK都包含了一个兼容的JRE和一个JVM，并且JDK包含了许多Java开发人员常用的工具以及类库，比如<code>javac、java、jar、jmap、jstat、jstack、jinfo、rt.jar</code>等。</li></ul></li><li>什么是JVM？<ul><li>JVM(Java Virtual Machine),JVM可以理解为是一个运行在操作系统之上的虚拟电脑，当我们通过<code>javac</code>将<code>*.java</code>编译成JVM可识别<code>*.class</code>字节码文件后，再执行<code>java</code>，此时JVM会将<code>*.class</code>字节码文件解释成当前操作系统平台可识别的机器码去执行。这样的话就实现了”Write once, run anywhere.”。</li></ul></li><li>整体流程如下所示</li></ul><img src="/images/posts/JVM/javaCli.png" width="800px"></blockquote><h1><span id="jvm-lei-jia-zai-de-guo-cheng">JVM类加载的过程</span><a href="#jvm-lei-jia-zai-de-guo-cheng" class="header-anchor">#</a></h1><img src="/images/posts/JVM/JVMClassLoader.png" width="600px"><h3><span id="jia-zai-jie-duan">加载阶段：</span><a href="#jia-zai-jie-duan" class="header-anchor">#</a></h3><ol><li>通过类的全限定名来读取class字节码文件的二进制流</li><li>将字节流中的静态数据结构转化为方法区的运行时数据结构</li><li>在内存中生成代表这个类的<code>java.lang.Class</code>对象，作为方法区中这个类中的各种数据结构的访问入口<ul><li>注意：<ul><li>这只是类加载的其中一个阶段，不要和类加载混淆</li><li>加载阶段和链接阶段中的部分动作是交叉进行的，加载阶段尚未完成，链接阶段可能已经开始</li></ul></li></ul></li></ol><h3><span id="lian-jie-jie-duan-linking">链接阶段（linking）</span><a href="#lian-jie-jie-duan-linking" class="header-anchor">#</a></h3><ol><li>验证<ol><li>文件格式验证：确保class文件的字节流中包含的信息符合虚拟机规范，并且不会危害虚拟机自身的安全</li><li>元数据验证：语义分析<ol><li>是否有父类（除<code>java.lang.Object</code>外，所有的类都必须有父类）</li><li>是否继承了不该继承的类</li><li>如果不是抽象类，是否实现了父类或接口中要求实现的所有方法</li><li>字段、方法是否与父类冲突</li></ol></li><li>字节码验证：<ol><li>确定语义合法、符合逻辑</li><li>类的方法不会做出危害虚拟机的事件</li></ol></li><li>符号引用验证：发生将符号引用转化为直接引用的时候 -&gt; 解析时<ol><li>全限定名是否能找到对应的类</li><li>指定类中是否存在被引用的方法和字段</li><li>符号引用中的类、字段、方法的访问性是否可以被当前类访问（private、protected、public、default）</li></ol></li></ol></li><li>准备：<ol><li>为类变量（被static修饰的）在方法区中分配内存，实例变量在对象实例化时分配在Java堆中</li><li>设置初始值，此时是赋零值，真正的值在初始化时完成赋值；finnal例外，直接赋值；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static int value &#x3D; 99；</span><br><span class="line">public static final int value &#x3D; 99；</span><br><span class="line">准备阶段结束后</span><br><span class="line">public static int value &#x3D; 0；</span><br><span class="line">public static final int value &#x3D; 99；</span><br></pre></td></tr></table></figure></li></ol></li><li>解析：将常量池中的符号引用替换为直接引用<br>//TODO 什么是符号引用和直接引用？<ol><li>类或接口解析</li><li>字段解析</li><li>类方法解析</li><li>接口方法解析</li></ol></li></ol><h3><span id="chu-shi-hua">初始化</span><a href="#chu-shi-hua" class="header-anchor">#</a></h3><ol><li>这是类加载过程的最后一步，除了在加载阶段用户可以通过自定义类加载器参与，其他阶段皆由虚拟机主导和控制</li><li>在该阶段开始真正初始化类中定义的Java程序代码（或者说是字节码），调用<code>&lt;clinit&gt;()</code><br>在遇到以下几种情况时，触发初始化：<ul><li>当虚拟机启动时，初始化用户指定的主类；</li><li>当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类；</li><li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li><li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li><li>子类的初始化会触发父类的初始化；</li><li>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li><li>使用反射 API 对某个类进行反射调用时，初始化这个类；</li><li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</li></ul></li></ol><p>至此，一个字节码文件便已经初始化完成。</p><h1><span id="ben-wen-zong-jie">本文总结</span><a href="#ben-wen-zong-jie" class="header-anchor">#</a></h1><p>加载一个class类的过程总体分三个步骤，<code>加载、链接、初始化</code>，其中链接阶段分为<code>验证、准备、解析</code>三个阶段，加载阶段通过类的全限定名来读取class字节码文件的二进制流，并将字节码数据转化为方法区的运行时数据结构。链接阶段中的验证阶段对字节码文件进行格式和安全校验，准备阶段为类中的部分变量（被static修饰的变量）分配内存和初始值的赋值，解析阶段将常量池中的符号引用替换为直接引用。初始化阶段会将静态代码的赋值操作和静态代码块中的代码交给<code>&lt;clinit&gt;()</code>方法进行初始化，完成变量的赋值以及资源的分配。</p><h1><span id="xiang-guan-wen-ti">相关问题</span><a href="#xiang-guan-wen-ti" class="header-anchor">#</a></h1><h3><span id="xu-ni-ji-shi-ru-he-zuo-dao-tong-guo-lei-de-quan-xian-ding-ming-qu-zhao-dao-dui-ying-de-class-wen-jian-de">虚拟机是如何做到通过类的全限定名去找到对应的Class文件的？</span><a href="#xu-ni-ji-shi-ru-he-zuo-dao-tong-guo-lei-de-quan-xian-ding-ming-qu-zhao-dao-dui-ying-de-class-wen-jian-de" class="header-anchor">#</a></h3><ul><li><a href="https://imchenway.com/2021/07/02/JVM-类加载器与双亲委派模型/" target="_blank" rel="noopener">JVM类加载器与双亲委派模型</a></li></ul><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Mac自定义定时任务</title>
    <link href="http://yoursite.com/2021/02/23/Mac%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2021/02/23/Mac%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2021-02-23T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#0-xiang-guan-bei-jing-zhi-shi">0. 相关背景知识</a><ul><li><a href="#0-1-mac-zhong-ding-yi-ding-shi-ren-wu-de-ji-chong-fang-shi">0.1. Mac 中定义定时任务的几种方式</a></li><li><a href="#0-1-shi-me-shi-launchd">0.1. 什么是 Launchd</a></li><li><a href="#0-2-shi-me-shi-plist">0.2. 什么是 plist</a></li><li><a href="#0-3-plist-fang-zai-bu-tong-wei-zhi-shi-de-qu-bie">0.3. plist 放在不同位置时的区别</a></li></ul></li><li><a href="#1-tong-guo-launchctl-wei-mac-she-zhi-ding-shi-ren-wu">1. 通过 Launchctl 为 Mac 设置定时任务</a><ul><li><a href="#1-1-chuang-jian-dai-zhi-xing-de-shell">1.1. 创建待执行的 shell</a></li><li><a href="#1-2-chuang-jian-plist-bing-fang-ru-suo-xu-mu-lu">1.2. 创建 plist 并放入所需目录</a></li></ul></li><li><a href="#2-chang-yong-launchctl-ming-ling">2. 常用 Launchctl 命令</a></li><li><a href="#3-geng-duo-gao-ji-yong-fa-can-kao">3. 更多高级用法参考</a></li></ul><!-- tocstop --></div><h1><span id="0-xiang-guan-bei-jing-zhi-shi">0. 相关背景知识</span><a href="#0-xiang-guan-bei-jing-zhi-shi" class="header-anchor">#</a></h1><h3><span id="0-1-mac-zhong-ding-yi-ding-shi-ren-wu-de-ji-chong-fang-shi">0.1. Mac 中定义定时任务的几种方式</span><a href="#0-1-mac-zhong-ding-yi-ding-shi-ren-wu-de-ji-chong-fang-shi" class="header-anchor">#</a></h3><ol><li>Launchd（官方推荐的方式）</li><li>cron（重启后即失效，不推荐）</li><li>brew services<br>本文介绍使用 Launchd 方式开启定时任务</li></ol><h3><span id="0-1-shi-me-shi-launchd">0.1. 什么是 Launchd</span><a href="#0-1-shi-me-shi-launchd" class="header-anchor">#</a></h3><p><a href="https://en.wikipedia.org/wiki/Launchd" target="_blank" rel="noopener">Launchd</a>是 MacOS 用来管理系统和用户级别的守护进程的工具。<br>该工具由两部分组成：</p><ul><li>launchd<ul><li>launchd 主要有两个任务：<ul><li>一是启动系统</li><li>二是加载和维护服务</li></ul></li><li>系统启动时，launchd 会加载<code>/System/Library/LaunchDaemons</code>和<code>/Library/LaunchDaemons</code>中的所有<a href="#0-2-shi-me-shi-plist">plist 文件</a>，然后根据需要启动 launchctl。</li></ul></li><li>launchctl<ul><li>在 launchd 中，对服务的控制集中在<code>launchctl</code>中。</li></ul></li></ul><h3><span id="0-2-shi-me-shi-plist">0.2. 什么是 plist</span><a href="#0-2-shi-me-shi-plist" class="header-anchor">#</a></h3><ul><li>MacOS 用来存储序列化后的对象的文件，文件后缀名为 plist，因为称为 plist 文件。</li><li>对于 launchd 来说，每一个 plist 文件即为一个任务（Job）<ul><li>launchd 启动时，会扫描<code>/System/Library/LaunchDaemons</code>和<code>/Library/LaunchDaemons</code>中的所有 plist 文件并加载它们</li><li>用户登录后，会扫描<code>/System/Library/LaunchAgents</code>、<code>/Library/LaunchAgents</code>、<code>~/Library/LaunchAgents</code>这三个目录的文件并加载它们</li><li>plist 中设置了<code>RunAtLoad</code>为<code>true</code>或<code>KeepAlive</code>为<code>true</code>时，会在加载时立即执行</li></ul></li></ul><p>plist 示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="meta-string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>homebrew.mxcl.mysql@5.7<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/opt/mysql@5.7/bin/mysqld_safe<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>--datadir=/usr/local/var/mysql<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>WorkingDirectory<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/var/mysql<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="0-3-plist-fang-zai-bu-tong-wei-zhi-shi-de-qu-bie">0.3. plist 放在不同位置时的区别</span><a href="#0-3-plist-fang-zai-bu-tong-wei-zhi-shi-de-qu-bie" class="header-anchor">#</a></h3><table><thead><tr><th>类型</th><th>位置</th><th>以什么用户权限运行</th><th>运行时机</th></tr></thead><tbody><tr><td>系统 Daemons</td><td><code>/System/Library/LaunchDaemons</code></td><td>root/指定用户</td><td>开机时</td></tr><tr><td>全局 Daemons</td><td><code>/Library/LaunchAgents</code></td><td>root/指定用户</td><td>开机时</td></tr><tr><td>系统 Agents</td><td><code>/System/Library/LaunchAgents</code></td><td>当前登录用户</td><td>用户登录</td></tr><tr><td>全局 Agents</td><td><code>/Library/LaunchAgents</code></td><td>当前登录用户</td><td>用户登录</td></tr><tr><td>用户 Agents</td><td><code>~/Library/LaunchAgents</code></td><td>当前登录用户</td><td>当前设置用户登录时</td></tr></tbody></table><p><code>LaunchDaemons</code>和<code>LaunchAgents</code>主要有以下两个区别：</p><ol><li>运行时机<ol><li><code>LaunchDaemons</code>在按下开机按钮后，用户还未输入密码时，就已经运行了。</li><li><code>LaunchAgents</code>在用户输入密码后，才开始运行。</li></ol></li><li>运行用户<ol><li><code>LaunchDaemons</code>是以 root/其他指定用户运行</li><li><code>LaunchAgents</code>是以当前登录用户的权限运行</li></ol></li></ol><h1><span id="1-tong-guo-launchctl-wei-mac-she-zhi-ding-shi-ren-wu">1. 通过 Launchctl 为 Mac 设置定时任务</span><a href="#1-tong-guo-launchctl-wei-mac-she-zhi-ding-shi-ren-wu" class="header-anchor">#</a></h1><p>下面通过实现定时开关 Mac 的 Wi-Fi 来演示具体流程：</p><h3><span id="1-1-chuang-jian-dai-zhi-xing-de-shell">1.1. 创建待执行的 shell</span><a href="#1-1-chuang-jian-dai-zhi-xing-de-shell" class="header-anchor">#</a></h3><p>如果有多台 Mac 同步需求，建议将以下 shell 放入自己的 iCloud 目录，没有这个需求的话自行安排，记得存放路径就行</p><ul><li>closeWiFi.sh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭Wi-Fi</span></span><br><span class="line">networksetup -setairportpower en0 off</span><br></pre></td></tr></table></figure><ul><li>openWiFi.sh</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开Wi-Fi</span></span><br><span class="line">networksetup -setairportpower en0 on</span><br></pre></td></tr></table></figure><h3><span id="1-2-chuang-jian-plist-bing-fang-ru-suo-xu-mu-lu">1.2. 创建 plist 并放入所需目录</span><a href="#1-2-chuang-jian-plist-bing-fang-ru-suo-xu-mu-lu" class="header-anchor">#</a></h3><ul><li>这两个文件用于执行对应的需求，以下几点需要注意<ul><li>具体放哪个目录的参考<a href="#0-3-plist-fang-zai-bu-tong-wei-zhi-shi-de-qu-bie">plist 放在不同位置时的区别</a>，我的放在<code>/Library/LaunchAgents</code>下，这样只要电脑开机，就算未输入密码，plist 文件也会被执行到</li><li><code>Label</code>标签的值，不能与其他 plist 文件中的<code>Label</code>标签中的值完全重复</li><li><code>ProgramArguments</code>标签中放入 shell 所在的路径</li><li><code>StartCalendarInterval</code>用于控制在指定的时间执行 shell<ul><li>可用<code>StartCalendarInterval</code>替换为每隔 N 秒执行一次 shell</li></ul></li><li><code>RunAtLoad</code>和<code>KeepAlive</code>为<code>true</code>时，在 plist 被加载时，会被立即执行一次</li><li><code>StandardOutPath</code>填写脚本运行日志输出的路径</li><li><code>StandardErrorPath</code>填写脚本运行错误日志输出的路径</li></ul></li><li>closewifi.plist （每天晚上 23 点 00 分，执行 closeWiFi.sh）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="meta-string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.david.closewifi.plist<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/David/Documents/Personal/Script/closeWiFi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>00<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>23<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/David/Documents/Personal/Script/log/closeWiFi.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/David/Documents/Personal/Script/log/closeWiFi-err.err<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>openwifi.plist（每天早上 09 点 00 分，执行 openWiFi.sh）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">plist</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="meta-string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.david.openwifi.plist<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/David/Documents/Personal/Script/openWiFi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>00<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>09<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/David/Documents/Personal/Script/log/openWiFi.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/David/Documents/Personal/Script/log/openWiFi-err.err<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><h1><span id="2-chang-yong-launchctl-ming-ling">2. 常用 Launchctl 命令</span><a href="#2-chang-yong-launchctl-ming-ling" class="header-anchor">#</a></h1><ul><li><p><code>launchctl list</code><br>列出已加载的所有 plist<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gnzlpmcsutj30gr0790um.jpg" alt><br>其中 PID 为<code>-</code>的表示虽然已加载，但是未启动，PID 为数字的表示已启动并且这个数字就时它的 PID</p></li><li><p><code>launchctl load</code><br><code>launchctl load /Library/LaunchDaemons/closewifi.plist</code><br>手动加载一个 plist 任务</p></li><li><p><code>launchctl unload</code><br><code>launchctl unload /Library/LaunchDaemons/closewifi.plist</code><br>禁用一个 plist 任务</p></li><li><p><code>launchctl start</code><br>启动一个 plist 任务</p></li><li><p><code>launchctl stop</code><br>停止一个 plist 任务</p></li></ul><h1><span id="3-geng-duo-gao-ji-yong-fa-can-kao">3. 更多高级用法参考</span><a href="#3-geng-duo-gao-ji-yong-fa-can-kao" class="header-anchor">#</a></h1><p><a href="https://www.launchd.info" target="_blank" rel="noopener">A launchd Tutorial</a><br><a href="https://ss64.com/osx/launchctl.html" target="_blank" rel="noopener">launchctl</a><br><a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html" target="_blank" rel="noopener">Daemons and Services Programming Guide</a><br><a href="https://www.manpagez.com/man/5/launchd.plist/" target="_blank" rel="noopener">man launchd.plist</a></p><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>MacOS下Charles与Shadowsocks共存</title>
    <link href="http://yoursite.com/2020/03/27/MacOS%E4%B8%8BCharles%E4%B8%8EShadowsocks%E5%85%B1%E5%AD%98/"/>
    <id>http://yoursite.com/2020/03/27/MacOS%E4%B8%8BCharles%E4%B8%8EShadowsocks%E5%85%B1%E5%AD%98/</id>
    <published>2020-03-27T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-jie-jue-yi-xia-wen-ti">本文解决以下问题</span><a href="#ben-wen-jie-jue-yi-xia-wen-ti" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#1-charles-yu-shadowsocks-gong-cun">1. charles与shadowsocks共存</a></li><li><a href="#2-zhuan-fa-xian-shang-ye-mian-qing-qiu-dao-ben-di-gong-cheng">2. 转发线上页面请求到本地工程</a></li><li><a href="#3-jie-qu-macoshttps-qing-qiu">3. 截取MacOSHttps请求</a></li></ul><!-- tocstop --></div><h3><span id="1-charles-yu-shadowsocks-gong-cun">1. charles与shadowsocks共存</span><a href="#1-charles-yu-shadowsocks-gong-cun" class="header-anchor">#</a></h3><ol><li>shadowsocks改为全局模式（PAC模式无效，必须使用全局模式）<ol><li>全局模式下默认所有互联网请求全部走shadowsocks</li><li>此时如需访问内网地址<ol><li>在Mac中打开 设置-&gt;网络-&gt;高级-&gt;代理，<code>Bypass proxy settings for these Hosts &amp; Domains:</code>中填入内网IP</li><li>如图：<br><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8ubsuvcutj30je0fcgoz.jpg" alt></li><li>如有多个地址，可配为134.<em>.</em>.*</li></ol></li></ol></li><li>查看shadowsocks代理的本地http和https的端口（如上图）<ol><li>一般为<code>127.0.0.1:1087</code></li></ol></li><li>在Charles菜单栏找到 <code>proxy -&gt; external proxy settings</code><ol><li>在http和https中填入127.0.0.1:1087</li><li>如图：<br><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8ubq4cl19j30f20chwgt.jpg" alt></li><li>如有多个地址，可配为134.<em>.</em>.*</li></ol></li><li>此时即可正常抓包，如果域名为内网地址，此时会无法访问<ol><li>在Charles菜单栏找到 <code>proxy -&gt; external proxy settings</code></li><li>在<code>ByPass external proxies for the following hosts：</code>中填入内网ip</li></ol></li><li>此时已完美解决Charles和shadowsocks共存问题</li></ol><h3><span id="2-zhuan-fa-xian-shang-ye-mian-qing-qiu-dao-ben-di-gong-cheng">2. 转发线上页面请求到本地工程</span><a href="#2-zhuan-fa-xian-shang-ye-mian-qing-qiu-dao-ben-di-gong-cheng" class="header-anchor">#</a></h3><ol><li>Charles菜单栏 -&gt; proxy -&gt; MacOs Proxy</li><li>右键请求列表中的url或包，选中<code>Map Remote...</code></li><li>填入对应的URL相关信息即可</li></ol><h3><span id="3-jie-qu-macoshttps-qing-qiu">3. 截取MacOSHttps请求</span><a href="#3-jie-qu-macoshttps-qing-qiu" class="header-anchor">#</a></h3><ol><li>“Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate”<ul><li>在<code>keychain</code>处将新安装的证书设置为永久信任</li></ul></li><li>Preferences -&gt; Proxy -&gt; SSL Proxying Settings<ul><li>Add -&gt; 直接点击OK（截取所有https请求）<br><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8u6eu1soqj30gj0cwdic.jpg" alt></li></ul></li></ol><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-jie-jue-yi-xia-wen-ti&quot;&gt;本文解决以下问题&lt;/span&gt;&lt;a href=&quot;#ben-wen-jie-jue-yi-xia-wen-ti&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div cl</summary>
      
    
    
    
    
    <category term="#Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Mac开启HiDpi</title>
    <link href="http://yoursite.com/2020/02/17/Mac%E5%BC%80%E5%90%AFHiDpi/"/>
    <id>http://yoursite.com/2020/02/17/Mac%E5%BC%80%E5%90%AFHiDpi/</id>
    <published>2020-02-17T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#1-zhun-bei-gong-ju">1. 准备工具</a></li><li><a href="#2-guan-bi-system-integrity-protection-sip">2. 关闭System Integrity Protection SIP</a></li><li><a href="#3-kai-qi-macbook-de-hidpi">3. 开启macbook的hidpi</a></li><li><a href="#4-huo-qu-2k-xian-shi-qi-de-displayvendorid-he-displayproductid">4. 获取2k显示器的DisplayVendorID和DisplayProductID</a></li><li><a href="#5-bian-ji-displayproductid-yyyy-wen-jian">5. 编辑DisplayProductID-YYYY文件</a></li><li><a href="#6-shi-yong-rdm-jin-xing-qie-huan">6. 使用RDM进行切换</a></li><li><a href="#7-read-only-file-system">7.”Read-only file system”</a></li></ul><!-- tocstop --></div><h1><span id="1-zhun-bei-gong-ju">1. 准备工具</span><a href="#1-zhun-bei-gong-ju" class="header-anchor">#</a></h1><ul><li>1.PlistEdit Pro</li><li>2.RDM</li><li>3.16进制和10进制转换工具</li></ul><h1><span id="2-guan-bi-system-integrity-protection-sip">2. 关闭System Integrity Protection SIP</span><a href="#2-guan-bi-system-integrity-protection-sip" class="header-anchor">#</a></h1><ul><li><p>我们重启macbook，在开机的时候按command+R进入恢复模式，然后我们在终端输入</p></li><li><p><code>csrutil disable</code></p></li></ul><p>当我们设置完分辨率后可以再输入以下命令打开，保证安全性。</p><ul><li><code>csrutil enable</code></li></ul><h1><span id="3-kai-qi-macbook-de-hidpi">3. 开启macbook的hidpi</span><a href="#3-kai-qi-macbook-de-hidpi" class="header-anchor">#</a></h1><ul><li>打开终端输入</li></ul><p><code>sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool YES</code></p><ul><li>回车后，需要输入管理员密码，然后再回车，完毕。</li></ul><h1><span id="4-huo-qu-2k-xian-shi-qi-de-displayvendorid-he-displayproductid">4. 获取2k显示器的DisplayVendorID和DisplayProductID</span><a href="#4-huo-qu-2k-xian-shi-qi-de-displayvendorid-he-displayproductid" class="header-anchor">#</a></h1><ul><li>我们先不插外界显示器的连接线，获取macbook自己屏幕的ID，然后再插上外接显示器获取外界显示器的ID。<br>在终端输入如下命令</li></ul><p><code>ioreg -l | grep &quot;DisplayVendorID&quot;</code></p><p><code>ioreg -l | grep &quot;DisplayProductID&quot;</code></p><p>如图：<br><img src="http://ww1.sinaimg.cn/large/7c2d7f0egy1ftvh2a3ui9j20yi0ne7a5.jpg" alt></p><ul><li>我经过显示器的拔插就可以筛选出外接显示器的两个ID。DisplayVendorID为2513，DisplayProductID为32795</li><li>我们新建一个名字为DisplayVendorID-XXXX的文件夹，其中XXXX是DisplayVendorID的16进制小写即9d1，则文件夹名字为DisplayVendorID-9d1。然后再创建一个空白文件，这里你们可以直接用我的模板进行修改.<a href="https://www.ianisme.com/download/201803/DisplayVendorID-9d1.zip" target="_blank" rel="noopener">点我下载</a></li><li>我们将这个文件命名为DisplayProductID-YYYY，其中YYYY即DisplayProductID的16进制小写即801b。</li></ul><h1><span id="5-bian-ji-displayproductid-yyyy-wen-jian">5. 编辑DisplayProductID-YYYY文件</span><a href="#5-bian-ji-displayproductid-yyyy-wen-jian" class="header-anchor">#</a></h1><ul><li>我们使用PlistEdit Pro去打开这个文件，然后在DisplayProductID和DisplayVendorID处填写这两个值的10进制原始值，然后下面按照如下规则去设置对应的分辨率。</li><li>例如我这里要设置 1920 * 1080 hidpi 的设置，我设置 1920 * 1080 和 3840 * 2160 两种。<br>1920的16进制是00000780，1080的16进制是00000438，后面需要拼接上00000001 00200000</li><li>即：<br>00000780 00000438 00000001 00200000<br>3840的16进制是00000F00，2160的16进制是00000870，后面需要拼接上00000001 00200000<br>00000F00 00000870 00000001 00200000</li><li>我们将这个数据添加到文件中去。</li></ul><p>文件中添加了几个例子。<br>如图：<br><img src="http://ww1.sinaimg.cn/large/7c2d7f0egy1ftvh44en6oj211k0za17j.jpg" alt></p><p>然后我们把这个文件夹拷贝到/System/Library/Displays/Contents/Resources/Overrides/中去</p><h1><span id="6-shi-yong-rdm-jin-xing-qie-huan">6. 使用RDM进行切换</span><a href="#6-shi-yong-rdm-jin-xing-qie-huan" class="header-anchor">#</a></h1><p>重启系统打开RDM，这就可以进行切换了。<br>如图：<br><img src="http://ww1.sinaimg.cn/large/7c2d7f0egy1ftvh4xp761j20d409wad7.jpg" alt></p><h1><span id="7-read-only-file-system">7.”Read-only file system”</span><a href="#7-read-only-file-system" class="header-anchor">#</a></h1><ul><li>解決方法<br><code>sudo mount -uw /</code></li></ul><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Git拉取代码加速</title>
    <link href="http://yoursite.com/2020/01/07/Git%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E5%8A%A0%E9%80%9F/"/>
    <id>http://yoursite.com/2020/01/07/Git%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E5%8A%A0%E9%80%9F/</id>
    <published>2020-01-07T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#yuan-qi">源起</a></li><li><a href="#shi-yong-dai-li-de-fang-fa">使用代理的方法</a><ul><li><a href="#git-quan-ju-dai-li">git全局代理</a></li><li><a href="#jin-github-dai-li">仅GitHub代理</a></li><li><a href="#xiang-guan-ming-ling">相关命令</a></li></ul></li><li><a href="#bu-shi-yong-dai-li-de-fang-fa">不使用代理的方法</a></li></ul><!-- tocstop --></div><h1><span id="yuan-qi">源起</span><a href="#yuan-qi" class="header-anchor">#</a></h1><ul><li>本想看一下ElasticSearch源码，结果拉取ElasticSearch源码时看到170W个文件，10kb/s的速度时。。。</li><li>话不多说，直接上教程，以下两种方法皆亲测有效</li></ul><h1><span id="shi-yong-dai-li-de-fang-fa">使用代理的方法</span><a href="#shi-yong-dai-li-de-fang-fa" class="header-anchor">#</a></h1><h3><span id="git-quan-ju-dai-li">git全局代理</span><a href="#git-quan-ju-dai-li" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># socks5协议，1080端口修改成自己的本地代理端口</span><br><span class="line">git config --global http.proxy socks5:&#x2F;&#x2F;127.0.0.1:1086</span><br><span class="line">git config --global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:1086</span><br><span class="line"></span><br><span class="line"># http协议，1081端口修改成自己的本地代理端口</span><br><span class="line">git config --global http.proxy http:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line">git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1087</span><br></pre></td></tr></table></figure><ul><li>以上的配置会导致所有git命令都走代理，但是如果你混合使用了国内的git仓库，甚至是局域网内部的git仓库，这就会把原来速度快的改成更慢的了；</li><li>下面是仅仅针对github进行配置，让github走本地代理，其他的保持不变；</li></ul><h3><span id="jin-github-dai-li">仅GitHub代理</span><a href="#jin-github-dai-li" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># socks5协议，1080端口修改成自己的本地代理端口</span><br><span class="line">git config --global http.https:&#x2F;&#x2F;github.com.proxy socks5:&#x2F;&#x2F;127.0.0.1:1086</span><br><span class="line">git config --global https.https:&#x2F;&#x2F;github.com.proxy socks5:&#x2F;&#x2F;127.0.0.1:1086</span><br><span class="line"></span><br><span class="line"># http协议，1081端口修改成自己的本地代理端口</span><br><span class="line">git config --global http.https:&#x2F;&#x2F;github.com.proxy https:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line">git config --global https.https:&#x2F;&#x2F;github.com.proxy https:&#x2F;&#x2F;127.0.0.1:1087</span><br></pre></td></tr></table></figure><h3><span id="xiang-guan-ming-ling">相关命令</span><a href="#xiang-guan-ming-ling" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有配置</span><br><span class="line">git config -l</span><br><span class="line"># reset 代理设置</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h1><span id="bu-shi-yong-dai-li-de-fang-fa">不使用代理的方法</span><a href="#bu-shi-yong-dai-li-de-fang-fa" class="header-anchor">#</a></h1><ol><li>修改host<br>把下面两行加到host文件末尾<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">151.101.72.249 github.http:&#x2F;&#x2F;global.ssl.fastly.net</span><br><span class="line">192.30.253.112 github.com</span><br></pre></td></tr></table></figure></li></ol><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>善用Google</title>
    <link href="http://yoursite.com/2019/12/13/%E5%96%84%E7%94%A8Google/"/>
    <id>http://yoursite.com/2019/12/13/%E5%96%84%E7%94%A8Google/</id>
    <published>2019-12-13T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#1-chang-yong-sou-suo-ming-ling">1. 常用搜索命令</a><ul><li><a href="#shuang-yin-hao">双引号<code>&quot;&quot;</code></a></li><li><a href="#jian-hao">减号<code>-</code></a></li><li><a href="#xing-hao">星号<code>*</code></a></li><li><a href="#luo-ji-sou-suo-or">逻辑搜索<code>or</code></a></li><li><a href="#tong-yi-ci-sou-suo">同义词搜索<code>~</code></a></li><li><a href="#inurl">inurl</a></li><li><a href="#inanchor">inanchor</a></li><li><a href="#wang-ye-biao-ti-he-lian-jie-zhu-ti-zhong-sou-suo-intitle">网页标题和链接主题中搜索<code>intitle</code></a></li><li><a href="#allintitle">allintitle</a></li><li><a href="#allurl">allurl</a></li><li><a href="#sou-suo-xiang-si-ye-mian-related">搜索相似页面<code>related</code></a></li><li><a href="#zhan-nei-sou-suo-site">站内搜索<code>site</code></a></li><li><a href="#filetype">filetype</a></li><li><a href="#define">define</a></li><li><a href="#an-shi-jian-duan-cha-xun">按时间段查询</a></li><li><a href="#shu-xue-ji-suan">数学计算</a></li><li><a href="#dan-wei-huan-suan">单位换算</a></li><li><a href="#google-zhuan-ye-sou-suo">Google专业搜索</a></li></ul></li><li><a href="#2-kuai-jie-jian">2. 快捷键</a><ul><li><a href="#ben-ye-cha-zhao">本页查找</a></li><li><a href="#fang-da-suo-xiao">放大/缩小</a></li><li><a href="#xuan-zhong-liu-lan-qi-di-zhi-lan">选中浏览器地址栏</a></li></ul></li><li><a href="#3-ri-chang-sheng-huo">3. 日常生活</a><ul><li><a href="#cheng-shi-de-tian-qi-suo-zai-shi-qu-de-shi-jian-ri-chu-shi-jian-ri-luo-shi-jian">城市的天气／所在时区的时间／日出时间／日落时间</a></li><li><a href="#ge-shou-de-ge-shou-ge-qu">歌手的各首歌曲</a></li><li><a href="#hui-lu">汇率</a></li><li><a href="#fan-hui-liang-ge-cheng-shi-de-ju-chi">返回两个城市的距离</a></li></ul></li><li><a href="#4-chang-yong-sou-suo-wang-zhan">4. 常用搜索网站</a><ul><li><a href="#shu-ji-zi-yuan">书籍资源</a></li><li><a href="#dian-ying-zi-yuan">电影资源</a></li></ul></li><li><a href="#5-tu-jie">5. 图解</a></li></ul><!-- tocstop --></div><h1><span id="1-chang-yong-sou-suo-ming-ling">1. 常用搜索命令</span><a href="#1-chang-yong-sou-suo-ming-ling" class="header-anchor">#</a></h1><h3><span id="shuang-yin-hao-quot-quot">双引号<code>&quot;&quot;</code></span><a href="#shuang-yin-hao-quot-quot" class="header-anchor">#</a></h3><ul><li>将整个短语作为关键字,并严格按照短语顺序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">搜索： &quot;测试搜索&quot;</span><br></pre></td></tr></table></figure></li></ul><h3><span id="jian-hao">减号<code>-</code></span><a href="#jian-hao" class="header-anchor">#</a></h3><ul><li>排除某个关键字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：搜索 -引擎</span><br><span class="line">返回的则是包含“搜索”这个词，却不包含“引擎”这个词的结果</span><br></pre></td></tr></table></figure></li></ul><h3><span id="xing-hao">星号<code>*</code></span><a href="#xing-hao" class="header-anchor">#</a></h3><ul><li>通配符，代表任何文字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">搜索：搜索*擎</span><br></pre></td></tr></table></figure><h3><span id="luo-ji-sou-suo-or">逻辑搜索<code>or</code></span><a href="#luo-ji-sou-suo-or" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu or Google</span><br></pre></td></tr></table></figure></li></ul><h3><span id="tong-yi-ci-sou-suo">同义词搜索<code>~</code></span><a href="#tong-yi-ci-sou-suo" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浙江 ~大学</span><br></pre></td></tr></table></figure><h3><span id="inurl">inurl</span><a href="#inurl" class="header-anchor">#</a></h3><ul><li>inurl: 指令用于搜索查询词出现在url 中的页面。bd和Google 都支持inurl 指令。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">搜索：inurl:搜索引擎优化</span><br><span class="line">搜索: java inurl:blog</span><br><span class="line">inurl:gov 减肥</span><br></pre></td></tr></table></figure></li></ul><h3><span id="inanchor">inanchor</span><a href="#inanchor" class="header-anchor">#</a></h3><ul><li>inanchor:指令返回的结果是导入链接锚文字中包含搜索词的页面。百度不支持inanchor。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">搜索 ：inanchor:点击这里</span><br></pre></td></tr></table></figure><h3><span id="wang-ye-biao-ti-he-lian-jie-zhu-ti-zhong-sou-suo-intitle">网页标题和链接主题中搜索<code>intitle</code></span><a href="#wang-ye-biao-ti-he-lian-jie-zhu-ti-zhong-sou-suo-intitle" class="header-anchor">#</a></h3></li><li>只显示标题中包含指定关键字的搜索结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如:intitle:面向对象</span><br></pre></td></tr></table></figure></li></ul><h3><span id="allintitle">allintitle</span><a href="#allintitle" class="header-anchor">#</a></h3><ul><li>allintitle:搜索返回的是页面标题中包含多组关键词的文件。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">搜索 ：allintitle:SEO 搜索引擎优化</span><br><span class="line"></span><br><span class="line">相当于：intitle:SEO intitle:搜索引擎优化</span><br></pre></td></tr></table></figure></li></ul><h3><span id="allurl">allurl</span><a href="#allurl" class="header-anchor">#</a></h3><ul><li>与allintitle: 类似<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allinurl:SEO 搜索引擎优化</span><br><span class="line"></span><br><span class="line">相当于 ：inurl:SEO inurl:搜索引擎优化</span><br></pre></td></tr></table></figure><h3><span id="sou-suo-xiang-si-ye-mian-related">搜索相似页面<code>related</code></span><a href="#sou-suo-xiang-si-ye-mian-related" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">related: youtube.com</span><br><span class="line">related: jingdong.com</span><br></pre></td></tr></table></figure><h3><span id="zhan-nei-sou-suo-site">站内搜索<code>site</code></span><a href="#zhan-nei-sou-suo-site" class="header-anchor">#</a></h3></li><li>指定只返回某个网站的内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java site:baidu.com</span><br><span class="line">java site:youtube.com</span><br><span class="line">site:imooc.com java</span><br><span class="line">site:stackoverflow.com java</span><br></pre></td></tr></table></figure></li><li>指定域名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">site:.com java</span><br><span class="line"></span><br><span class="line">.org&#x2F;.cn 非营利性机构，开源项目</span><br><span class="line">.com 用于商业公司</span><br><span class="line">.net 用于网络服务机构</span><br></pre></td></tr></table></figure></li></ul><h3><span id="filetype">filetype</span><a href="#filetype" class="header-anchor">#</a></h3><ul><li>返回指定的文件类型,可以与其他语法组合使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filetype:pdf java</span><br></pre></td></tr></table></figure></li></ul><h3><span id="define">define</span><a href="#define" class="header-anchor">#</a></h3><ul><li>快速查询字词定义<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define:网络</span><br></pre></td></tr></table></figure><h3><span id="an-shi-jian-duan-cha-xun">按时间段查询</span><a href="#an-shi-jian-duan-cha-xun" class="header-anchor">#</a></h3><h3><span id="shu-xue-ji-suan">数学计算</span><a href="#shu-xue-ji-suan" class="header-anchor">#</a></h3></li><li>直接搜索公式显示结果</li></ul><h3><span id="dan-wei-huan-suan">单位换算</span><a href="#dan-wei-huan-suan" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">54磅&#x3D;?公斤</span><br></pre></td></tr></table></figure><h3><span id="google-zhuan-ye-sou-suo">Google专业搜索</span><a href="#google-zhuan-ye-sou-suo" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Answers:直接让你的搜索需求面向专业人员的小组</span><br><span class="line"></span><br><span class="line">Book Search:小说和非小说类图书的全文</span><br><span class="line"></span><br><span class="line">Blog Search:搜索博客和博客文章</span><br><span class="line"></span><br><span class="line">News:最新新闻和头条的新闻网站，也能够搜索历史的新闻资料，一直可以追溯到两个世纪之前</span><br><span class="line"></span><br><span class="line">Scholar :在一个有着学术杂志、文章、报纸、论文和书籍的数据库中进行搜索</span><br></pre></td></tr></table></figure><h1><span id="2-kuai-jie-jian">2. 快捷键</span><a href="#2-kuai-jie-jian" class="header-anchor">#</a></h1><h3><span id="ben-ye-cha-zhao">本页查找</span><a href="#ben-ye-cha-zhao" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+F</span><br></pre></td></tr></table></figure><h3><span id="fang-da-suo-xiao">放大/缩小</span><a href="#fang-da-suo-xiao" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + +&#x2F;-</span><br></pre></td></tr></table></figure><h3><span id="xuan-zhong-liu-lan-qi-di-zhi-lan">选中浏览器地址栏</span><a href="#xuan-zhong-liu-lan-qi-di-zhi-lan" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + L</span><br></pre></td></tr></table></figure><h1><span id="3-ri-chang-sheng-huo">3. 日常生活</span><a href="#3-ri-chang-sheng-huo" class="header-anchor">#</a></h1><h3><span id="cheng-shi-de-tian-qi-suo-zai-shi-qu-de-shi-jian-ri-chu-shi-jian-ri-luo-shi-jian">城市的天气／所在时区的时间／日出时间／日落时间</span><a href="#cheng-shi-de-tian-qi-suo-zai-shi-qu-de-shi-jian-ri-chu-shi-jian-ri-luo-shi-jian" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weather／time／sunrise／sundown+城市名(英文)</span><br></pre></td></tr></table></figure><h3><span id="ge-shou-de-ge-shou-ge-qu">歌手的各首歌曲</span><a href="#ge-shou-de-ge-shou-ge-qu" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">歌手名字(英语）+music&#x2F;songs</span><br></pre></td></tr></table></figure><h3><span id="hui-lu">汇率</span><a href="#hui-lu" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1美元 in 人民币</span><br></pre></td></tr></table></figure><h3><span id="fan-hui-liang-ge-cheng-shi-de-ju-chi">返回两个城市的距离</span><a href="#fan-hui-liang-ge-cheng-shi-de-ju-chi" class="header-anchor">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hangzhou to jiangxi distance</span><br></pre></td></tr></table></figure><h1><span id="4-chang-yong-sou-suo-wang-zhan">4. 常用搜索网站</span><a href="#4-chang-yong-sou-suo-wang-zhan" class="header-anchor">#</a></h1><h3><span id="shu-ji-zi-yuan">书籍资源</span><a href="#shu-ji-zi-yuan" class="header-anchor">#</a></h3><ul><li><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">鸠摩搜书</a></li><li><a href="http://www.pansou.com/" target="_blank" rel="noopener">网盘搜索</a></li><li><a href="https://bookfere.com/" target="_blank" rel="noopener">Kindle伴侣: kindle书籍资源下载</a></li></ul><h3><span id="dian-ying-zi-yuan">电影资源</span><a href="#dian-ying-zi-yuan" class="header-anchor">#</a></h3><ul><li><a href="http://www.dytt8.net/index.htm" target="_blank" rel="noopener">电影天堂</a></li><li><a href="http://www.xunleicang.com/" target="_blank" rel="noopener">迅雷仓</a></li></ul><h1><span id="5-tu-jie">5. 图解</span><a href="#5-tu-jie" class="header-anchor">#</a></h1><p><a href="http://ww1.sinaimg.cn/large/7c2d7f0egy1fs8arv4nxqj20go54cqv6.jpg" target="_blank" rel="noopener"></a></p><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Add Two Numbers - LeetCode</title>
    <link href="http://yoursite.com/2019/11/11/Add%20Two%20Numbers%20-%20LeetCode/"/>
    <id>http://yoursite.com/2019/11/11/Add%20Two%20Numbers%20-%20LeetCode/</id>
    <published>2019-11-11T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#ti-mu-miao-shu">题目描述</a></li><li><a href="#ti-wai-hua">题外话</a></li><li><a href="#jie">解</a></li><li><a href="#ya-jie-dian">哑结点</a></li></ul><!-- tocstop --></div><h1><span id="ti-mu-miao-shu">题目描述</span><a href="#ti-mu-miao-shu" class="header-anchor">#</a></h1><blockquote><ul><li>两数相加：<ul><li>给出两个<code>非空</code>的链表用来表示两个非负的整数。其中，它们各自的位数是按照<code>逆序</code>的方式存储的，并且它们的每个节点只能存储<code>一位</code>数字。</li><li>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</li><li>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</li></ul></li><li>示例：<ul><li>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</li><li>输出：7 -&gt; 0 -&gt; 8</li><li>原因：342 + 465 = 807</li></ul></li></ul></blockquote><h1><span id="ti-wai-hua">题外话</span><a href="#ti-wai-hua" class="header-anchor">#</a></h1><ul><li>上来审题不清楚以为是倒序相加然后进位<br>例如： <ul><li>输入<code>（2 -&gt; 3 -&gt; 4) + (5 -&gt; 6-&gt; 7)</code> 时，结果应该是 <code>234 + 567 = 801</code>，输出 <code>8 -&gt; 0 -&gt; 1</code>;</li><li>这样的话咋一看其实也很简单，只需要将两个链表中的数字<code>234</code>和<code>567</code>取出后再放入链表输出即可；</li><li>but！！！<ul><li>将题解放上LeetCode后，官方的测试用例中有类似<code>（9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9) + (5 -&gt; 6-&gt; 7)</code>的极限测试，将取出的<code>234</code>和<code>567</code>相加时会抛出整数溢出异常，用<code>BigDicimal</code>也无解，况且实际情况中无法知道该数会有多大，放弃。</li></ul></li></ul></li></ul><h1><span id="jie">解</span><a href="#jie" class="header-anchor">#</a></h1><ul><li>按题目意思输入<code>（2 -&gt; 3 -&gt; 4) + (5 -&gt; 6-&gt; 7)</code> 时，其实应该是 <code>432 + 765 = 1197</code> ，输出 <code>7 -&gt; 9 -&gt; 1 -&gt; 1</code>;</li><li>这样的话其实只需要将每位相加，如果有进位，再加上进位后的1即可。</li><li>直接贴官方的解题思路<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jibmf51cj318e0ncafl.jpg" alt><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode result = dummyHead;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> l1Val = (l1 != <span class="keyword">null</span>) ? l1.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l2Val = (l2 != <span class="keyword">null</span>) ? l2.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = l1Val + l2Val + carry;</span><br><span class="line">        carry = sum / <span class="number">10</span>;</span><br><span class="line">        result.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        result = result.next;</span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            l1 = l1.next != <span class="keyword">null</span> ? l1.next : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            l2 = l2.next != <span class="keyword">null</span> ? l2.next : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><span id="ya-jie-dian">哑结点</span><a href="#ya-jie-dian" class="header-anchor">#</a></h1></li><li>这题的精髓就在与哑结点的设置，可以在最后直接将链表头返回；<ul><li><code>ListNode result = dummyHead;</code>将<code>dummyHead</code>和<code>result</code>指向同一个引用；</li><li>随后的<code>result = result.next;</code>只是在该引用后添加新的节点；</li><li>最终<code>return dummyHead.next;</code>返回的是有效的第一个节点；</li></ul></li></ul><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>使用GitHub + Hexo搭建个人博客</title>
    <link href="http://yoursite.com/2019/10/23/%E4%BD%BF%E7%94%A8GitHub%20+%20Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/10/23/%E4%BD%BF%E7%94%A8GitHub%20+%20Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2019-10-23T16:00:00.000Z</published>
    <updated>2025-09-28T15:39:42.729Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="ben-wen-mu-lu">本文目录</span><a href="#ben-wen-mu-lu" class="header-anchor">#</a></h3><div class="toc"><!-- toc --><ul><li><a href="#1-zhun-bei-huan-jing">1. 准备环境</a></li><li><a href="#2-an-zhuang-hexo">2. 安装Hexo</a></li><li><a href="#3-chuang-jian-github-pages">3. 创建GitHub Pages</a></li><li><a href="#4-jiang-hexo-bu-shu-dao-github">4. 将Hexo部署到Github</a></li><li><a href="#5-fa-biao-bo-wen">5. 发表博文</a></li><li><a href="#6-geng-huan-zhu-ti">6. 更换主题</a></li><li><a href="#7-hexo-bei-fen">7. hexo备份</a></li><li><a href="#8-kai-qi-toc-zhi-chi">8. 开启TOC支持</a></li><li><a href="#9-wen-zhang-biao-ti-qu-fen-da-xiao-xie">9. 文章标题区分大小写</a></li><li><a href="#10-ji-cheng-gitalk">10. 集成Gitalk</a></li><li><a href="#10-ji-cheng-bai-du-tong-ji">10. 集成百度统计</a></li><li><a href="#11-ji-cheng-google-adsense">11. 集成Google Adsense</a></li></ul><!-- tocstop --></div><h1><span id="1-zhun-bei-huan-jing">1. 准备环境</span><a href="#1-zhun-bei-huan-jing" class="header-anchor">#</a></h1><ul><li><code>node.js</code></li><li><code>git</code></li><li><code>npm</code></li></ul><h1><span id="2-an-zhuang-hexo">2. 安装Hexo</span><a href="#2-an-zhuang-hexo" class="header-anchor">#</a></h1><h4><span id="2-1-zhi-xing-yi-xia-ming-ling-an-zhuang-hexo">2.1. 执行以下命令安装Hexo</span><a href="#2-1-zhi-xing-yi-xia-ming-ling-an-zhuang-hexo" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4><span id="2-2-chu-shi-hua">2.2. 初始化</span><a href="#2-2-chu-shi-hua" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init imchenway.com</span><br><span class="line">cd imchenway.com</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4><span id="2-3-chu-shi-hua-hou-de-mu-lu-wei">2.3. 初始化后的目录为</span><a href="#2-3-chu-shi-hua-hou-de-mu-lu-wei" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 </span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds # 模版文件夹</span><br><span class="line">├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><br><span class="line">|   ├── _drafts # 草稿文件</span><br><span class="line">|   └── _posts # 文章Markdowm文件 </span><br><span class="line">└── themes  # 主题文件夹</span><br></pre></td></tr></table></figure><h4><span id="2-4-zhi-xing-yi-xia-ming-ling-cha-kan-xiao-guo-s-shi-server-de-suo-xie-liu-lan-qi-shu-ru-http-localhost-4000-jiu-ke-yi-yu-lan-xiao-guo-liao">2.4. 执行以下命令查看效果,s 是<code>server</code>的缩写，浏览器输入就可以预览效果了。</span><a href="#2-4-zhi-xing-yi-xia-ming-ling-cha-kan-xiao-guo-s-shi-server-de-suo-xie-liu-lan-qi-shu-ru-http-localhost-4000-jiu-ke-yi-yu-lan-xiao-guo-liao" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1><span id="3-chuang-jian-github-pages">3. 创建GitHub Pages</span><a href="#3-chuang-jian-github-pages" class="header-anchor">#</a></h1><h4><span id="3-1-chuang-jian-repository">3.1. 创建</span><a href="#3-1-chuang-jian-repository" class="header-anchor">#</a></h4><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8vgepn3x9j30tw0mjdme.jpg" alt></p><h4><span id="3-2-clone-the-repository">3.2. Clone the repository</span><a href="#3-2-clone-the-repository" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;imchenway&#x2F;imchenway.github.io.git</span><br></pre></td></tr></table></figure><h4><span id="3-3-hello-world">3.3. Hello World</span><a href="#3-3-hello-world" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd username.github.io</span><br><span class="line"></span><br><span class="line">echo &quot;Hello World&quot; &gt; index.html</span><br></pre></td></tr></table></figure><h4><span id="3-4-push-it">3.4. Push it</span><a href="#3-4-push-it" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br><span class="line"></span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h4><span id="3-5-settings-pei-zhi">3.5. Settings配置</span><a href="#3-5-settings-pei-zhi" class="header-anchor">#</a></h4><ul><li>source中选中自己的master分支<br><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8vgjj4p8fj30rq0423zz.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8vgks8f4yj30pq0gsdlp.jpg" alt></li></ul><h4><span id="3-6-ci-shi-fang-wen-https-imchenway-github-io-ji-ke-kan-dao-xiao-guo">3.6. 此时访问即可看到效果</span><a href="#3-6-ci-shi-fang-wen-https-imchenway-github-io-ji-ke-kan-dao-xiao-guo" class="header-anchor">#</a></h4><h1><span id="4-jiang-hexo-bu-shu-dao-github">4. 将Hexo部署到Github</span><a href="#4-jiang-hexo-bu-shu-dao-github" class="header-anchor">#</a></h1><h4><span id="4-1-pei-zhi-ssh-key">4.1 配置SSH key</span><a href="#4-1-pei-zhi-ssh-key" class="header-anchor">#</a></h4><h5><span id="4-1-1-ce-shi-ssh-key">4.1.1. 测试SSH key</span><a href="#4-1-1-ce-shi-ssh-key" class="header-anchor">#</a></h5><ul><li>命令行输入<code>cd ~/.ssh</code></li><li>如果没报错或者提示什么的说明就是以前生成过的，直接使用<code>cat ~/.ssh/id_rsa.pub</code>命令查看本机上的<code>SSH key</code></li></ul><h5><span id="4-1-2-ru-guo-zhi-qian-mei-you-chuang-jian-ze-zhi-xing-yi-xia-ming-ling-quan-ju-pei-zhi-yi-xia-ben-di-zhang-hu">4.1.2. 如果之前没有创建，则执行以下命令全局配置一下本地账户：</span><a href="#4-1-2-ru-guo-zhi-qian-mei-you-chuang-jian-ze-zhi-xing-yi-xia-ming-ling-quan-ju-pei-zhi-yi-xia-ben-di-zhang-hu" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><h5><span id="4-1-3-ran-hou-kai-shi-sheng-cheng-mi-yao-ssh-key">4.1.3. 然后开始生成密钥 SSH key</span><a href="#4-1-3-ran-hou-kai-shi-sheng-cheng-mi-yao-ssh-key" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#39;上面的邮箱&#39;</span><br></pre></td></tr></table></figure><ul><li>按照提示完成三次回车，即可生成<code>ssh key</code>。</li><li>通过<code>cat ~/.ssh/id_rsa.pub</code>查看 <code>~/.ssh/id_rsa.pub</code> 文件内容，获取到你的<code>SSH key</code></li></ul><h5><span id="4-1-4-shou-ci-shi-yong-huan-xu-yao-que-ren-bing-tian-jia-zhu-ji-dao-ben-ji-ssh-ke-xin-lie-biao">4.1.4. 首次使用还需要确认并添加主机到本机SSH可信列表</span><a href="#4-1-4-shou-ci-shi-yong-huan-xu-yao-que-ren-bing-tian-jia-zhu-ji-dao-ben-ji-ssh-ke-xin-lie-biao" class="header-anchor">#</a></h5><ul><li>若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide  access. 内容，则证明添加成功。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ul><h5><span id="4-1-5-github-shang-tian-jia-gang-gang-sheng-cheng-de-ssh-key-an-yi-xia-bu-zou-tian-jia">4.1.5. Github 上添加刚刚生成的SSH key，按以下步骤添加：</span><a href="#4-1-5-github-shang-tian-jia-gang-gang-sheng-cheng-de-ssh-key-an-yi-xia-bu-zou-tian-jia" class="header-anchor">#</a></h5><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8vgvddczmj31ac0f6qca.jpg" alt></p><h4><span id="4-2-hexo-bu-shu-dao-github">4.2 Hexo部署到GitHub</span><a href="#4-2-hexo-bu-shu-dao-github" class="header-anchor">#</a></h4><h5><span id="4-2-1-jin-ru-hexo-chu-shi-hua-de-mu-lu-imchenway-com-xia-xiu-gai-config-yml-zhong-de-deploy-pei-zhi">4.2.1. 进入Hexo初始化的目录<code>imchenway.com</code>下,修改<code>_config.yml</code>中的deploy配置</span><a href="#4-2-1-jin-ru-hexo-chu-shi-hua-de-mu-lu-imchenway-com-xia-xiu-gai-config-yml-zhong-de-deploy-pei-zhi" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd imchenway.com</span><br><span class="line">vi _config.yml</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8vgzn6lidj30gu044q4a.jpg" alt></p><h5><span id="4-2-2-an-zhuang-bu-shu-cha-jian">4.2.2. 安装部署插件</span><a href="#4-2-2-an-zhuang-bu-shu-cha-jian" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h5><span id="4-2-3-tui-song-yuan-ma-hong-fa-actions-zi-dong-bu-shu">4.2.3. 推送源码触发 Actions 自动部署</span><a href="#4-2-3-tui-song-yuan-ma-hong-fa-actions-zi-dong-bu-shu" class="header-anchor">#</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;chore: sync local changes&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><h5><span id="4-2-4-fang-wen-https-imchenway-github-io-cha-kan-xiao-guo">4.2.4. 访问查看效果</span><a href="#4-2-4-fang-wen-https-imchenway-github-io-cha-kan-xiao-guo" class="header-anchor">#</a></h5><h1><span id="5-fa-biao-bo-wen">5. 发表博文</span><a href="#5-fa-biao-bo-wen" class="header-anchor">#</a></h1><h4><span id="5-1-chuang-jian-xin-de-bo-wen">5.1. 创建新的博文</span><a href="#5-1-chuang-jian-xin-de-bo-wen" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#39;博文标题&#39;</span><br></pre></td></tr></table></figure><h4><span id="5-2-ben-di-ce-shi">5.2. 本地测试</span><a href="#5-2-ben-di-ce-shi" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4><span id="5-3-chong-xin-bu-shu-dao-github-fang-wen-https-imchenway-github-io-cha-kan-xiao-guo">5.3. 重新部署到GitHub,访问查看效果</span><a href="#5-3-chong-xin-bu-shu-dao-github-fang-wen-https-imchenway-github-io-cha-kan-xiao-guo" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h1><span id="6-geng-huan-zhu-ti">6. 更换主题</span><a href="#6-geng-huan-zhu-ti" class="header-anchor">#</a></h1><h4><span id="6-1-zhong-duan-zhi-xing">6.1. 终端执行</span><a href="#6-1-zhong-duan-zhi-xing" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd imchenway.com</span><br><span class="line">cd themes</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Ben02&#x2F;hexo-theme-Anatole.git anatole</span><br><span class="line">cd anatole</span><br><span class="line">git pull</span><br><span class="line">npm install --save hexo-render-pug hexo-generator-archive hexo-generator-tag hexo-generator-index hexo-generator-category</span><br></pre></td></tr></table></figure><h4><span id="6-2-xiu-gai-config-yml">6.2.修改<code>_config.yml</code></span><a href="#6-2-xiu-gai-config-yml" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># anatole</span><br><span class="line">archive_generator:</span><br><span class="line">    per_page: 0  </span><br><span class="line">    yearly: false</span><br><span class="line">    monthly: false</span><br><span class="line">    daily: false</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g8virr42naj30pm0bkq7f.jpg" alt></p><h4><span id="6-3-chong-xin-bu-shu-dao-github-fang-wen-https-imchenway-github-io-cha-kan-xiao-guo">6.3. 重新部署到GitHub,访问查看效果</span><a href="#6-3-chong-xin-bu-shu-dao-github-fang-wen-https-imchenway-github-io-cha-kan-xiao-guo" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h1><span id="7-hexo-bei-fen">7. hexo备份</span><a href="#7-hexo-bei-fen" class="header-anchor">#</a></h1><h4><span id="7-1-an-zhuang-bei-fen-cha-jian">7.1 安装备份插件</span><a href="#7-1-an-zhuang-bei-fen-cha-jian" class="header-anchor">#</a></h4><ul><li>终端执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure></li><li>修改根目录<code>_config.yml</code>，添加如下内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># theme：你要备份的主题名称</span><br><span class="line"># message：自定义提交信息</span><br><span class="line"># repository：仓库名，仓库地址添加一个分支名</span><br><span class="line">backup:</span><br><span class="line">  type: git</span><br><span class="line">  theme: anatole</span><br><span class="line">  message: Back up my imchenway.com blog</span><br><span class="line">  repository:</span><br><span class="line">    github: https:&#x2F;&#x2F;github.com&#x2F;imchenway&#x2F;imchenway.github.io.git,hexo</span><br></pre></td></tr></table></figure></li><li>在原GitHub.io项目下创建分支<code>hexo</code></li><li>终端执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo backup</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ul><h4><span id="7-2-hui-fu-bo-ke">7.2 恢复博客</span><a href="#7-2-hui-fu-bo-ke" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;imchenway&#x2F;imchenway.github.io.git</span><br><span class="line">npm install hexo-cli</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h1><span id="8-kai-qi-toc-zhi-chi">8. 开启TOC支持</span><a href="#8-kai-qi-toc-zhi-chi" class="header-anchor">#</a></h1><ul><li>安装插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-toc --save</span><br></pre></td></tr></table></figure></li><li>修改<code>_config.yml</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">toc:</span><br><span class="line">  maxdepth: 3</span><br><span class="line">  class: toc</span><br><span class="line">  slugify: transliteration</span><br><span class="line">  decodeEntities: false</span><br><span class="line">  anchor:</span><br><span class="line">    position: after</span><br><span class="line">    symbol: &#39;#&#39;</span><br><span class="line">    style: header-anchor</span><br></pre></td></tr></table></figure></li><li>文章中加入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br></pre></td></tr></table></figure></li></ul><h1><span id="9-wen-zhang-biao-ti-qu-fen-da-xiao-xie">9. 文章标题区分大小写</span><a href="#9-wen-zhang-biao-ti-qu-fen-da-xiao-xie" class="header-anchor">#</a></h1><ul><li>将主题文件夹<code>/source/css/</code>目录中的<code>.scss</code>文件里面的<code>text-transform: uppercase;</code>全去掉</li></ul><h1><span id="10-ji-cheng-gitalk">10. 集成Gitalk</span><a href="#10-ji-cheng-gitalk" class="header-anchor">#</a></h1><ul><li><p>打开<code>hexo/themes/anatole/layout/partial/comments.pug</code>文件, 在文件末尾加入以下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if theme.gitalk</span><br><span class="line">    if theme.gitalk.enable &#x3D;&#x3D; true</span><br><span class="line">        link(rel&#x3D;&quot;stylesheet&quot;, href&#x3D;&#39;https:&#x2F;&#x2F;unpkg.com&#x2F;gitalk&#x2F;dist&#x2F;gitalk.css&#39;)</span><br><span class="line">        div(id&#x3D;&#39;gitalk-container&#39;)</span><br><span class="line">        script(src&#x3D;&quot;&#x2F;js&#x2F;md5.min.js&quot;)</span><br><span class="line">        script(src&#x3D;&#39;https:&#x2F;&#x2F;unpkg.com&#x2F;gitalk&#x2F;dist&#x2F;gitalk.min.js&#39;)</span><br><span class="line">        script.</span><br><span class="line">            var gitalk &#x3D; new Gitalk(&#123;</span><br><span class="line">                clientID: &#39;#&#123;theme.gitalk.clientID&#125;&#39;,</span><br><span class="line">                clientSecret: &#39;#&#123;theme.gitalk.clientSecret&#125;&#39;,</span><br><span class="line">                id: md5(location.pathname),</span><br><span class="line">                repo: &#39;#&#123;theme.gitalk.repo&#125;&#39;,</span><br><span class="line">                owner: &#39;#&#123;theme.gitalk.owner&#125;&#39;,</span><br><span class="line">             admin: &#39;#&#123;theme.gitalk.admin&#125;&#39;</span><br><span class="line">            &#125;)</span><br><span class="line">            gitalk.render(&#39;gitalk-container&#39;);</span><br></pre></td></tr></table></figure></li><li><p>在 <code>/hexo/themes/anatole/source/js</code> 目录中新建文件 <code>md5.min.js</code> , 在其中加入如下内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">md5.min.js!<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">var</span> r=(<span class="number">65535</span>&amp;n)+(<span class="number">65535</span>&amp;t);<span class="keyword">return</span>(n&gt;&gt;<span class="number">16</span>)+(t&gt;&gt;<span class="number">16</span>)+(r&gt;&gt;<span class="number">16</span>)&lt;&lt;<span class="number">16</span>|<span class="number">65535</span>&amp;r&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> n&lt;&lt;t|n&gt;&gt;&gt;<span class="number">32</span>-t&#125;<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n,e,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> t(r(t(t(e,n),t(u,f)),c),o)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(t&amp;r|~t&amp;o,n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(t&amp;o|r&amp;~o,n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(t^r^o,n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n,t,r,o,u,c,f</span>)</span>&#123;<span class="keyword">return</span> e(r^(t|~o),n,t,u,c,f)&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">n,r</span>)</span>&#123;n[r&gt;&gt;<span class="number">5</span>]|=<span class="number">128</span>&lt;&lt;r%<span class="number">32</span>,n[<span class="number">14</span>+(r+<span class="number">64</span>&gt;&gt;&gt;<span class="number">9</span>&lt;&lt;<span class="number">4</span>)]=r;<span class="keyword">var</span> e,i,a,d,h,l=<span class="number">1732584193</span>,g=<span class="number">-271733879</span>,v=<span class="number">-1732584194</span>,m=<span class="number">271733878</span>;<span class="keyword">for</span>(e=<span class="number">0</span>;e&lt;n.length;e+=<span class="number">16</span>)i=l,a=g,d=v,h=m,g=f(g=f(g=f(g=f(g=c(g=c(g=c(g=c(g=u(g=u(g=u(g=u(g=o(g=o(g=o(g=o(g,v=o(v,m=o(m,l=o(l,g,v,m,n[e],<span class="number">7</span>,<span class="number">-680876936</span>),g,v,n[e+<span class="number">1</span>],<span class="number">12</span>,<span class="number">-389564586</span>),l,g,n[e+<span class="number">2</span>],<span class="number">17</span>,<span class="number">606105819</span>),m,l,n[e+<span class="number">3</span>],<span class="number">22</span>,<span class="number">-1044525330</span>),v=o(v,m=o(m,l=o(l,g,v,m,n[e+<span class="number">4</span>],<span class="number">7</span>,<span class="number">-176418897</span>),g,v,n[e+<span class="number">5</span>],<span class="number">12</span>,<span class="number">1200080426</span>),l,g,n[e+<span class="number">6</span>],<span class="number">17</span>,<span class="number">-1473231341</span>),m,l,n[e+<span class="number">7</span>],<span class="number">22</span>,<span class="number">-45705983</span>),v=o(v,m=o(m,l=o(l,g,v,m,n[e+<span class="number">8</span>],<span class="number">7</span>,<span class="number">1770035416</span>),g,v,n[e+<span class="number">9</span>],<span class="number">12</span>,<span class="number">-1958414417</span>),l,g,n[e+<span class="number">10</span>],<span class="number">17</span>,<span class="number">-42063</span>),m,l,n[e+<span class="number">11</span>],<span class="number">22</span>,<span class="number">-1990404162</span>),v=o(v,m=o(m,l=o(l,g,v,m,n[e+<span class="number">12</span>],<span class="number">7</span>,<span class="number">1804603682</span>),g,v,n[e+<span class="number">13</span>],<span class="number">12</span>,<span class="number">-40341101</span>),l,g,n[e+<span class="number">14</span>],<span class="number">17</span>,<span class="number">-1502002290</span>),m,l,n[e+<span class="number">15</span>],<span class="number">22</span>,<span class="number">1236535329</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">1</span>],<span class="number">5</span>,<span class="number">-165796510</span>),g,v,n[e+<span class="number">6</span>],<span class="number">9</span>,<span class="number">-1069501632</span>),l,g,n[e+<span class="number">11</span>],<span class="number">14</span>,<span class="number">643717713</span>),m,l,n[e],<span class="number">20</span>,<span class="number">-373897302</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">5</span>],<span class="number">5</span>,<span class="number">-701558691</span>),g,v,n[e+<span class="number">10</span>],<span class="number">9</span>,<span class="number">38016083</span>),l,g,n[e+<span class="number">15</span>],<span class="number">14</span>,<span class="number">-660478335</span>),m,l,n[e+<span class="number">4</span>],<span class="number">20</span>,<span class="number">-405537848</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">9</span>],<span class="number">5</span>,<span class="number">568446438</span>),g,v,n[e+<span class="number">14</span>],<span class="number">9</span>,<span class="number">-1019803690</span>),l,g,n[e+<span class="number">3</span>],<span class="number">14</span>,<span class="number">-187363961</span>),m,l,n[e+<span class="number">8</span>],<span class="number">20</span>,<span class="number">1163531501</span>),v=u(v,m=u(m,l=u(l,g,v,m,n[e+<span class="number">13</span>],<span class="number">5</span>,<span class="number">-1444681467</span>),g,v,n[e+<span class="number">2</span>],<span class="number">9</span>,<span class="number">-51403784</span>),l,g,n[e+<span class="number">7</span>],<span class="number">14</span>,<span class="number">1735328473</span>),m,l,n[e+<span class="number">12</span>],<span class="number">20</span>,<span class="number">-1926607734</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">5</span>],<span class="number">4</span>,<span class="number">-378558</span>),g,v,n[e+<span class="number">8</span>],<span class="number">11</span>,<span class="number">-2022574463</span>),l,g,n[e+<span class="number">11</span>],<span class="number">16</span>,<span class="number">1839030562</span>),m,l,n[e+<span class="number">14</span>],<span class="number">23</span>,<span class="number">-35309556</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">1</span>],<span class="number">4</span>,<span class="number">-1530992060</span>),g,v,n[e+<span class="number">4</span>],<span class="number">11</span>,<span class="number">1272893353</span>),l,g,n[e+<span class="number">7</span>],<span class="number">16</span>,<span class="number">-155497632</span>),m,l,n[e+<span class="number">10</span>],<span class="number">23</span>,<span class="number">-1094730640</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">13</span>],<span class="number">4</span>,<span class="number">681279174</span>),g,v,n[e],<span class="number">11</span>,<span class="number">-358537222</span>),l,g,n[e+<span class="number">3</span>],<span class="number">16</span>,<span class="number">-722521979</span>),m,l,n[e+<span class="number">6</span>],<span class="number">23</span>,<span class="number">76029189</span>),v=c(v,m=c(m,l=c(l,g,v,m,n[e+<span class="number">9</span>],<span class="number">4</span>,<span class="number">-640364487</span>),g,v,n[e+<span class="number">12</span>],<span class="number">11</span>,<span class="number">-421815835</span>),l,g,n[e+<span class="number">15</span>],<span class="number">16</span>,<span class="number">530742520</span>),m,l,n[e+<span class="number">2</span>],<span class="number">23</span>,<span class="number">-995338651</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e],<span class="number">6</span>,<span class="number">-198630844</span>),g,v,n[e+<span class="number">7</span>],<span class="number">10</span>,<span class="number">1126891415</span>),l,g,n[e+<span class="number">14</span>],<span class="number">15</span>,<span class="number">-1416354905</span>),m,l,n[e+<span class="number">5</span>],<span class="number">21</span>,<span class="number">-57434055</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e+<span class="number">12</span>],<span class="number">6</span>,<span class="number">1700485571</span>),g,v,n[e+<span class="number">3</span>],<span class="number">10</span>,<span class="number">-1894986606</span>),l,g,n[e+<span class="number">10</span>],<span class="number">15</span>,<span class="number">-1051523</span>),m,l,n[e+<span class="number">1</span>],<span class="number">21</span>,<span class="number">-2054922799</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e+<span class="number">8</span>],<span class="number">6</span>,<span class="number">1873313359</span>),g,v,n[e+<span class="number">15</span>],<span class="number">10</span>,<span class="number">-30611744</span>),l,g,n[e+<span class="number">6</span>],<span class="number">15</span>,<span class="number">-1560198380</span>),m,l,n[e+<span class="number">13</span>],<span class="number">21</span>,<span class="number">1309151649</span>),v=f(v,m=f(m,l=f(l,g,v,m,n[e+<span class="number">4</span>],<span class="number">6</span>,<span class="number">-145523070</span>),g,v,n[e+<span class="number">11</span>],<span class="number">10</span>,<span class="number">-1120210379</span>),l,g,n[e+<span class="number">2</span>],<span class="number">15</span>,<span class="number">718787259</span>),m,l,n[e+<span class="number">9</span>],<span class="number">21</span>,<span class="number">-343485551</span>),l=t(l,i),g=t(g,a),v=t(v,d),m=t(m,h);<span class="keyword">return</span>[l,g,v,m]&#125;<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r=<span class="string">""</span>,e=<span class="number">32</span>*n.length;<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;e;t+=<span class="number">8</span>)r+=<span class="built_in">String</span>.fromCharCode(n[t&gt;&gt;<span class="number">5</span>]&gt;&gt;&gt;t%<span class="number">32</span>&amp;<span class="number">255</span>);<span class="keyword">return</span> r&#125;<span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r=[];<span class="keyword">for</span>(r[(n.length&gt;&gt;<span class="number">2</span>)<span class="number">-1</span>]=<span class="keyword">void</span> <span class="number">0</span>,t=<span class="number">0</span>;t&lt;r.length;t+=<span class="number">1</span>)r[t]=<span class="number">0</span>;<span class="keyword">var</span> e=<span class="number">8</span>*n.length;<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;e;t+=<span class="number">8</span>)r[t&gt;&gt;<span class="number">5</span>]|=(<span class="number">255</span>&amp;n.charCodeAt(t/<span class="number">8</span>))&lt;&lt;t%<span class="number">32</span>;<span class="keyword">return</span> r&#125;<span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> a(i(d(n),<span class="number">8</span>*n.length))&#125;<span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">var</span> r,e,o=d(n),u=[],c=[];<span class="keyword">for</span>(u[<span class="number">15</span>]=c[<span class="number">15</span>]=<span class="keyword">void</span> <span class="number">0</span>,o.length&gt;<span class="number">16</span>&amp;&amp;(o=i(o,<span class="number">8</span>*n.length)),r=<span class="number">0</span>;r&lt;<span class="number">16</span>;r+=<span class="number">1</span>)u[r]=<span class="number">909522486</span>^o[r],c[r]=<span class="number">1549556828</span>^o[r];<span class="keyword">return</span> e=i(u.concat(d(t)),<span class="number">512</span>+<span class="number">8</span>*t.length),a(i(c.concat(e),<span class="number">640</span>))&#125;<span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r,e=<span class="string">""</span>;<span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;n.length;r+=<span class="number">1</span>)t=n.charCodeAt(r),e+=<span class="string">"0123456789abcdef"</span>.charAt(t&gt;&gt;&gt;<span class="number">4</span>&amp;<span class="number">15</span>)+<span class="string">"0123456789abcdef"</span>.charAt(<span class="number">15</span>&amp;t);<span class="keyword">return</span> e&#125;<span class="function"><span class="keyword">function</span> <span class="title">v</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> h(v(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> g(m(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> l(v(n),v(t))&#125;<span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> g(s(n,t))&#125;<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">n,t,r</span>)</span>&#123;<span class="keyword">return</span> t?r?s(t,n):C(t,n):r?m(n):p(n)&#125;<span class="string">"function"</span>==<span class="keyword">typeof</span> define&amp;&amp;define.amd?define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> A&#125;):<span class="string">"object"</span>==<span class="keyword">typeof</span> <span class="built_in">module</span>&amp;&amp;<span class="built_in">module</span>.exports?<span class="built_in">module</span>.exports=A:n.md5=A&#125;(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//# sourceMappingURL=md5.min.js.map</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>hexo/_config.yml</code>中增加以下内容:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gitalk settings</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="attr">gitalk:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">imchenway</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">imchenway.github.io</span></span><br><span class="line">    <span class="attr">admin:</span> <span class="string">imchenway</span></span><br><span class="line">    <span class="attr">clientID:</span> <span class="string">your</span> <span class="string">clientID</span></span><br><span class="line">    <span class="attr">clientSecret:</span> <span class="string">your</span> <span class="string">clientSecret</span></span><br><span class="line">    <span class="attr">distractionFreeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><h1><span id="10-ji-cheng-bai-du-tong-ji">10. 集成百度统计</span><a href="#10-ji-cheng-bai-du-tong-ji" class="header-anchor">#</a></h1><ul><li>1. <a href="https://tongji.baidu.com/web/10000111788/welcome/login" target="_blank" rel="noopener">注册百度统计</a></li><li><ol start="2"><li>添加你的博客地址</li></ol></li><li><ol start="3"><li>在<code>hexo\themes\anatole\layout\partial</code> 目录下打开<code>head.pug</code>, 在末尾加上以下内容:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script.</span><br><span class="line">    var _hmt &#x3D; _hmt || [];</span><br><span class="line">    (function() &#123;</span><br><span class="line">        var hm &#x3D; document.createElement(&quot;script&quot;);</span><br><span class="line">        hm.src &#x3D; &quot;https:&#x2F;&#x2F;hm.baidu.com&#x2F;hm.js?542ea8c4a9ce535736e775029b1fad26&quot;;</span><br><span class="line">        var s &#x3D; document.getElementsByTagName(&quot;script&quot;)[0]; </span><br><span class="line">        s.parentNode.insertBefore(hm, s);</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="4"><li>等待20分钟后点击代码检查，显示代码安装正确即可<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ju6jbbdpj30uu0bkdh3.jpg" alt></li></ol></li></ul><h1><span id="11-ji-cheng-google-adsense">11. 集成Google Adsense</span><a href="#11-ji-cheng-google-adsense" class="header-anchor">#</a></h1><hr><p>本作品系原创，采用<a rel="license noopener" href="http://creativecommons.org/licenses/by-nc-nd/4.≠0/deed.zh" target="_blank">知识共享署名-非商业性使用-禁止演绎 4.0 国际许可协议</a>进行许可，转载请注明出处。</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"enable":true,"owner":"imchenway","repo":"imchenway.github.io","admin":"imchenway","clientID":"7026ab2c4cdadba4d342","clientSecret":"8e00dadc2db335285be4c861e53ee1bf9f8cc713","distractionFreeMode":false,"proxy":"https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token"};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;&lt;span id=&quot;ben-wen-mu-lu&quot;&gt;本文目录&lt;/span&gt;&lt;a href=&quot;#ben-wen-mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
    <category term="#Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
</feed>
